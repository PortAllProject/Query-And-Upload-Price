// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: price_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.Price {

  /// <summary>Holder for reflection information generated from price_contract.proto</summary>
  public static partial class PriceContractReflection {

    #region Descriptor
    /// <summary>File descriptor for price_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PriceContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRwcmljZV9jb250cmFjdC5wcm90bxoPYWVsZi9jb3JlLnByb3RvGhJhZWxm",
            "L29wdGlvbnMucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90bxof",
            "Z29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoUY2FsbGJhY2tfaW5w",
            "dXQucHJvdG8ingEKD0luaXRpYWxpemVJbnB1dBIlCg5vcmFjbGVfYWRkcmVz",
            "cxgBIAEoCzINLmFlbGYuQWRkcmVzcxIhCgpjb250cm9sbGVyGAIgASgLMg0u",
            "YWVsZi5BZGRyZXNzEicKEGF1dGhvcml6ZWRfdXNlcnMYAyADKAsyDS5hZWxm",
            "LkFkZHJlc3MSGAoQdHJhY2VfcGF0aF9saW1pdBgEIAEoBSLDAQoUUXVlcnlU",
            "b2tlblByaWNlSW5wdXQSFAoMdG9rZW5fc3ltYm9sGAEgASgJEhsKE3Rhcmdl",
            "dF90b2tlbl9zeW1ib2wYAiABKAkSMgobYWdncmVnYXRvcl9jb250cmFjdF9h",
            "ZGRyZXNzGAMgASgLMg0uYWVsZi5BZGRyZXNzEicKEGRlc2lnbmF0ZWRfbm9k",
            "ZXMYBCADKAsyDS5hZWxmLkFkZHJlc3MSGwoTYWdncmVnYXRlX3RocmVzaG9s",
            "ZBgFIAEoBSJSCh1VcGRhdGVTd2FwVG9rZW5UcmFjZUluZm9JbnB1dBIUCgx0",
            "b2tlbl9zeW1ib2wYASABKAkSGwoTdGFyZ2V0X3Rva2VuX3N5bWJvbBgCIAEo",
            "CSJ9CgpUb2tlblByaWNlEhQKDHRva2VuX3N5bWJvbBgBIAEoCRIbChN0YXJn",
            "ZXRfdG9rZW5fc3ltYm9sGAIgASgJEg0KBXByaWNlGAMgASgJEi0KCXRpbWVz",
            "dGFtcBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiTwoaR2V0",
            "U3dhcFRva2VuUHJpY2VJbmZvSW5wdXQSFAoMdG9rZW5fc3ltYm9sGAEgASgJ",
            "EhsKE3RhcmdldF90b2tlbl9zeW1ib2wYAiABKAkiXgofR2V0QmF0Y2hTd2Fw",
            "VG9rZW5QcmljZUluZm9JbnB1dBI7ChZ0b2tlbl9wcmljZV9xdWVyeV9saXN0",
            "GAEgAygLMhsuR2V0U3dhcFRva2VuUHJpY2VJbmZvSW5wdXQieAoeR2V0RXhj",
            "aGFuZ2VUb2tlblByaWNlSW5mb0lucHV0EiMKDG9yZ2FuaXphdGlvbhgBIAEo",
            "CzINLmFlbGYuQWRkcmVzcxIUCgx0b2tlbl9zeW1ib2wYAiABKAkSGwoTdGFy",
            "Z2V0X3Rva2VuX3N5bWJvbBgDIAEoCSJmCiNHZXRCYXRjaEV4Y2hhbmdlVG9r",
            "ZW5QcmljZUluZm9JbnB1dBI/ChZ0b2tlbl9wcmljZV9xdWVyeV9saXN0GAEg",
            "AygLMh8uR2V0RXhjaGFuZ2VUb2tlblByaWNlSW5mb0lucHV0Ii8KC0JhdGNo",
            "UHJpY2VzEiAKC3Rva2VuUHJpY2VzGAEgAygLMgsuVG9rZW5QcmljZSJFCgVQ",
            "cmljZRINCgV2YWx1ZRgBIAEoCRItCgl0aW1lc3RhbXAYAiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wIlYKDlByaWNlVHJhY2VJbmZvEhQKDHRy",
            "YWNlZF90b2tlbhgBIAEoCRIaChJ0cmFjZWRfcGF0aF93ZWlnaHQYAiABKAUS",
            "EgoKdG9rZW5fbGlzdBgDIAMoCSIhChBJc1F1ZXJ5SWRFeGlzdGVkEg0KBXZh",
            "bHVlGAEgASgIIkEKIkF1dGhvcml6ZWRTd2FwVG9rZW5QcmljZVF1ZXJ5VXNl",
            "cnMSGwoEbGlzdBgBIAMoCzINLmFlbGYuQWRkcmVzcyI0ChBPcmdhbml6YXRp",
            "b25MaXN0EiAKCW5vZGVfbGlzdBgBIAMoCzINLmFlbGYuQWRkcmVzcyIyChFD",
            "aGFuZ2VPcmFjbGVJbnB1dBIdCgZvcmFjbGUYASABKAsyDS5hZWxmLkFkZHJl",
            "c3MiMwoZQ2hhbmdlVHJhY2VQYXRoTGltaXRJbnB1dBIWCg5uZXdfcGF0aF9s",
            "aW1pdBgBIAEoBSIkCg5UcmFjZVBhdGhMaW1pdBISCgpwYXRoX2xpbWl0GAEg",
            "ASgFIq0BChZOZXdlc3RTd2FwUHJpY2VVcGRhdGVkEhQKDHRva2VuX3N5bWJv",
            "bBgBIAEoCRIbChN0YXJnZXRfdG9rZW5fc3ltYm9sGAIgASgJEg0KBXByaWNl",
            "GAMgASgJEi0KCXRpbWVzdGFtcBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASHAoIcXVlcnlfaWQYBSABKAsyCi5hZWxmLkhhc2g6BKC7GAEi",
            "3AEKGk5ld2VzdEV4Y2hhbmdlUHJpY2VVcGRhdGVkEhQKDHRva2VuX3N5bWJv",
            "bBgBIAEoCRIbChN0YXJnZXRfdG9rZW5fc3ltYm9sGAIgASgJEg0KBXByaWNl",
            "GAMgASgJEi0KCXRpbWVzdGFtcBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASKQoOcHJpY2Vfc3VwcGxpZXIYBSABKAsyES5Pcmdhbml6YXRp",
            "b25MaXN0EhwKCHF1ZXJ5X2lkGAYgASgLMgouYWVsZi5IYXNoOgSguxgBMv0J",
            "Cg1QcmljZUNvbnRyYWN0EjgKCkluaXRpYWxpemUSEC5Jbml0aWFsaXplSW5w",
            "dXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI6ChNRdWVyeVN3YXBUb2tl",
            "blByaWNlEhUuUXVlcnlUb2tlblByaWNlSW5wdXQaCi5hZWxmLkhhc2giABI+",
            "ChdRdWVyeUV4Y2hhbmdlVG9rZW5QcmljZRIVLlF1ZXJ5VG9rZW5QcmljZUlu",
            "cHV0GgouYWVsZi5IYXNoIgASQAoUUmVjb3JkU3dhcFRva2VuUHJpY2USDi5D",
            "YWxsYmFja0lucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASRAoYUmVj",
            "b3JkRXhjaGFuZ2VUb2tlblByaWNlEg4uQ2FsbGJhY2tJbnB1dBoWLmdvb2ds",
            "ZS5wcm90b2J1Zi5FbXB0eSIAElQKGFVwZGF0ZVN3YXBUb2tlblRyYWNlSW5m",
            "bxIeLlVwZGF0ZVN3YXBUb2tlblRyYWNlSW5mb0lucHV0GhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASaQooVXBkYXRlQXV0aG9yaXplZFN3YXBUb2tlblBy",
            "aWNlUXVlcnlVc2VycxIjLkF1dGhvcml6ZWRTd2FwVG9rZW5QcmljZVF1ZXJ5",
            "VXNlcnMaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI8CgxDaGFuZ2VPcmFj",
            "bGUSEi5DaGFuZ2VPcmFjbGVJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eSIAEkwKFENoYW5nZVRyYWNlUGF0aExpbWl0EhouQ2hhbmdlVHJhY2VQYXRo",
            "TGltaXRJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkMKFUdldFN3",
            "YXBUb2tlblByaWNlSW5mbxIbLkdldFN3YXBUb2tlblByaWNlSW5mb0lucHV0",
            "GgYuUHJpY2UiBYiJ9wEBElMKGkdldEJhdGNoU3dhcFRva2VuUHJpY2VJbmZv",
            "EiAuR2V0QmF0Y2hTd2FwVG9rZW5QcmljZUluZm9JbnB1dBoMLkJhdGNoUHJp",
            "Y2VzIgWIifcBARJLChlHZXRFeGNoYW5nZVRva2VuUHJpY2VJbmZvEh8uR2V0",
            "RXhjaGFuZ2VUb2tlblByaWNlSW5mb0lucHV0GgYuUHJpY2UiBYiJ9wEBElsK",
            "HkdldEJhdGNoRXhjaGFuZ2VUb2tlblByaWNlSW5mbxIkLkdldEJhdGNoRXhj",
            "aGFuZ2VUb2tlblByaWNlSW5mb0lucHV0GgwuQmF0Y2hQcmljZXMiBYiJ9wEB",
            "Ej0KFUNoZWNrUXVlcnlJZElmRXhpc3RlZBIKLmFlbGYuSGFzaBoRLklzUXVl",
            "cnlJZEV4aXN0ZWQiBYiJ9wEBEmsKJUdldEF1dGhvcml6ZWRTd2FwVG9rZW5Q",
            "cmljZVF1ZXJ5VXNlcnMSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaIy5BdXRo",
            "b3JpemVkU3dhcFRva2VuUHJpY2VRdWVyeVVzZXJzIgWIifcBARJDChFHZXRU",
            "cmFjZVBhdGhMaW1pdBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoPLlRyYWNl",
            "UGF0aExpbWl0IgWIifcBARosssz2ASdBRWxmLkNvbnRyYWN0cy5QcmljZS5Q",
            "cmljZUNvbnRyYWN0U3RhdGVCF6oCFEFFbGYuQ29udHJhY3RzLlByaWNlYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::CallbackInputReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.InitializeInput), global::AElf.Contracts.Price.InitializeInput.Parser, new[]{ "OracleAddress", "Controller", "AuthorizedUsers", "TracePathLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.QueryTokenPriceInput), global::AElf.Contracts.Price.QueryTokenPriceInput.Parser, new[]{ "TokenSymbol", "TargetTokenSymbol", "AggregatorContractAddress", "DesignatedNodes", "AggregateThreshold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.UpdateSwapTokenTraceInfoInput), global::AElf.Contracts.Price.UpdateSwapTokenTraceInfoInput.Parser, new[]{ "TokenSymbol", "TargetTokenSymbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.TokenPrice), global::AElf.Contracts.Price.TokenPrice.Parser, new[]{ "TokenSymbol", "TargetTokenSymbol", "Price", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.GetSwapTokenPriceInfoInput), global::AElf.Contracts.Price.GetSwapTokenPriceInfoInput.Parser, new[]{ "TokenSymbol", "TargetTokenSymbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.GetBatchSwapTokenPriceInfoInput), global::AElf.Contracts.Price.GetBatchSwapTokenPriceInfoInput.Parser, new[]{ "TokenPriceQueryList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.GetExchangeTokenPriceInfoInput), global::AElf.Contracts.Price.GetExchangeTokenPriceInfoInput.Parser, new[]{ "Organization", "TokenSymbol", "TargetTokenSymbol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.GetBatchExchangeTokenPriceInfoInput), global::AElf.Contracts.Price.GetBatchExchangeTokenPriceInfoInput.Parser, new[]{ "TokenPriceQueryList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.BatchPrices), global::AElf.Contracts.Price.BatchPrices.Parser, new[]{ "TokenPrices" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.Price), global::AElf.Contracts.Price.Price.Parser, new[]{ "Value", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.PriceTraceInfo), global::AElf.Contracts.Price.PriceTraceInfo.Parser, new[]{ "TracedToken", "TracedPathWeight", "TokenList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.IsQueryIdExisted), global::AElf.Contracts.Price.IsQueryIdExisted.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.AuthorizedSwapTokenPriceQueryUsers), global::AElf.Contracts.Price.AuthorizedSwapTokenPriceQueryUsers.Parser, new[]{ "List" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.OrganizationList), global::AElf.Contracts.Price.OrganizationList.Parser, new[]{ "NodeList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.ChangeOracleInput), global::AElf.Contracts.Price.ChangeOracleInput.Parser, new[]{ "Oracle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.ChangeTracePathLimitInput), global::AElf.Contracts.Price.ChangeTracePathLimitInput.Parser, new[]{ "NewPathLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.TracePathLimit), global::AElf.Contracts.Price.TracePathLimit.Parser, new[]{ "PathLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.NewestSwapPriceUpdated), global::AElf.Contracts.Price.NewestSwapPriceUpdated.Parser, new[]{ "TokenSymbol", "TargetTokenSymbol", "Price", "Timestamp", "QueryId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Price.NewestExchangePriceUpdated), global::AElf.Contracts.Price.NewestExchangePriceUpdated.Parser, new[]{ "TokenSymbol", "TargetTokenSymbol", "Price", "Timestamp", "PriceSupplier", "QueryId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      oracleAddress_ = other.oracleAddress_ != null ? other.oracleAddress_.Clone() : null;
      controller_ = other.controller_ != null ? other.controller_.Clone() : null;
      authorizedUsers_ = other.authorizedUsers_.Clone();
      tracePathLimit_ = other.tracePathLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "oracle_address" field.</summary>
    public const int OracleAddressFieldNumber = 1;
    private global::AElf.Types.Address oracleAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OracleAddress {
      get { return oracleAddress_; }
      set {
        oracleAddress_ = value;
      }
    }

    /// <summary>Field number for the "controller" field.</summary>
    public const int ControllerFieldNumber = 2;
    private global::AElf.Types.Address controller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Controller {
      get { return controller_; }
      set {
        controller_ = value;
      }
    }

    /// <summary>Field number for the "authorized_users" field.</summary>
    public const int AuthorizedUsersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_authorizedUsers_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> authorizedUsers_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> AuthorizedUsers {
      get { return authorizedUsers_; }
    }

    /// <summary>Field number for the "trace_path_limit" field.</summary>
    public const int TracePathLimitFieldNumber = 4;
    private int tracePathLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TracePathLimit {
      get { return tracePathLimit_; }
      set {
        tracePathLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OracleAddress, other.OracleAddress)) return false;
      if (!object.Equals(Controller, other.Controller)) return false;
      if(!authorizedUsers_.Equals(other.authorizedUsers_)) return false;
      if (TracePathLimit != other.TracePathLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oracleAddress_ != null) hash ^= OracleAddress.GetHashCode();
      if (controller_ != null) hash ^= Controller.GetHashCode();
      hash ^= authorizedUsers_.GetHashCode();
      if (TracePathLimit != 0) hash ^= TracePathLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oracleAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OracleAddress);
      }
      if (controller_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Controller);
      }
      authorizedUsers_.WriteTo(output, _repeated_authorizedUsers_codec);
      if (TracePathLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TracePathLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oracleAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OracleAddress);
      }
      if (controller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Controller);
      }
      size += authorizedUsers_.CalculateSize(_repeated_authorizedUsers_codec);
      if (TracePathLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TracePathLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.oracleAddress_ != null) {
        if (oracleAddress_ == null) {
          OracleAddress = new global::AElf.Types.Address();
        }
        OracleAddress.MergeFrom(other.OracleAddress);
      }
      if (other.controller_ != null) {
        if (controller_ == null) {
          Controller = new global::AElf.Types.Address();
        }
        Controller.MergeFrom(other.Controller);
      }
      authorizedUsers_.Add(other.authorizedUsers_);
      if (other.TracePathLimit != 0) {
        TracePathLimit = other.TracePathLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (oracleAddress_ == null) {
              OracleAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleAddress);
            break;
          }
          case 18: {
            if (controller_ == null) {
              Controller = new global::AElf.Types.Address();
            }
            input.ReadMessage(Controller);
            break;
          }
          case 26: {
            authorizedUsers_.AddEntriesFrom(input, _repeated_authorizedUsers_codec);
            break;
          }
          case 32: {
            TracePathLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryTokenPriceInput : pb::IMessage<QueryTokenPriceInput> {
    private static readonly pb::MessageParser<QueryTokenPriceInput> _parser = new pb::MessageParser<QueryTokenPriceInput>(() => new QueryTokenPriceInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryTokenPriceInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryTokenPriceInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryTokenPriceInput(QueryTokenPriceInput other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      aggregatorContractAddress_ = other.aggregatorContractAddress_ != null ? other.aggregatorContractAddress_.Clone() : null;
      designatedNodes_ = other.designatedNodes_.Clone();
      aggregateThreshold_ = other.aggregateThreshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryTokenPriceInput Clone() {
      return new QueryTokenPriceInput(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 2;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregator_contract_address" field.</summary>
    public const int AggregatorContractAddressFieldNumber = 3;
    private global::AElf.Types.Address aggregatorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AggregatorContractAddress {
      get { return aggregatorContractAddress_; }
      set {
        aggregatorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "designated_nodes" field.</summary>
    public const int DesignatedNodesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_designatedNodes_codec
        = pb::FieldCodec.ForMessage(34, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> designatedNodes_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> DesignatedNodes {
      get { return designatedNodes_; }
    }

    /// <summary>Field number for the "aggregate_threshold" field.</summary>
    public const int AggregateThresholdFieldNumber = 5;
    private int aggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AggregateThreshold {
      get { return aggregateThreshold_; }
      set {
        aggregateThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryTokenPriceInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryTokenPriceInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      if (!object.Equals(AggregatorContractAddress, other.AggregatorContractAddress)) return false;
      if(!designatedNodes_.Equals(other.designatedNodes_)) return false;
      if (AggregateThreshold != other.AggregateThreshold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (aggregatorContractAddress_ != null) hash ^= AggregatorContractAddress.GetHashCode();
      hash ^= designatedNodes_.GetHashCode();
      if (AggregateThreshold != 0) hash ^= AggregateThreshold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetTokenSymbol);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AggregatorContractAddress);
      }
      designatedNodes_.WriteTo(output, _repeated_designatedNodes_codec);
      if (AggregateThreshold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AggregateThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (aggregatorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregatorContractAddress);
      }
      size += designatedNodes_.CalculateSize(_repeated_designatedNodes_codec);
      if (AggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregateThreshold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryTokenPriceInput other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      if (other.aggregatorContractAddress_ != null) {
        if (aggregatorContractAddress_ == null) {
          AggregatorContractAddress = new global::AElf.Types.Address();
        }
        AggregatorContractAddress.MergeFrom(other.AggregatorContractAddress);
      }
      designatedNodes_.Add(other.designatedNodes_);
      if (other.AggregateThreshold != 0) {
        AggregateThreshold = other.AggregateThreshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
          case 26: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 34: {
            designatedNodes_.AddEntriesFrom(input, _repeated_designatedNodes_codec);
            break;
          }
          case 40: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateSwapTokenTraceInfoInput : pb::IMessage<UpdateSwapTokenTraceInfoInput> {
    private static readonly pb::MessageParser<UpdateSwapTokenTraceInfoInput> _parser = new pb::MessageParser<UpdateSwapTokenTraceInfoInput>(() => new UpdateSwapTokenTraceInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateSwapTokenTraceInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSwapTokenTraceInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSwapTokenTraceInfoInput(UpdateSwapTokenTraceInfoInput other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSwapTokenTraceInfoInput Clone() {
      return new UpdateSwapTokenTraceInfoInput(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 2;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateSwapTokenTraceInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateSwapTokenTraceInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateSwapTokenTraceInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TokenPrice : pb::IMessage<TokenPrice> {
    private static readonly pb::MessageParser<TokenPrice> _parser = new pb::MessageParser<TokenPrice>(() => new TokenPrice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenPrice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenPrice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenPrice(TokenPrice other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      price_ = other.price_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenPrice Clone() {
      return new TokenPrice(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 2;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private string price_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenPrice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenPrice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      if (Price != other.Price) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetTokenSymbol);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Price);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (Price.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenPrice other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
          case 26: {
            Price = input.ReadString();
            break;
          }
          case 34: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSwapTokenPriceInfoInput : pb::IMessage<GetSwapTokenPriceInfoInput> {
    private static readonly pb::MessageParser<GetSwapTokenPriceInfoInput> _parser = new pb::MessageParser<GetSwapTokenPriceInfoInput>(() => new GetSwapTokenPriceInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSwapTokenPriceInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSwapTokenPriceInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSwapTokenPriceInfoInput(GetSwapTokenPriceInfoInput other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSwapTokenPriceInfoInput Clone() {
      return new GetSwapTokenPriceInfoInput(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 2;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSwapTokenPriceInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSwapTokenPriceInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSwapTokenPriceInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBatchSwapTokenPriceInfoInput : pb::IMessage<GetBatchSwapTokenPriceInfoInput> {
    private static readonly pb::MessageParser<GetBatchSwapTokenPriceInfoInput> _parser = new pb::MessageParser<GetBatchSwapTokenPriceInfoInput>(() => new GetBatchSwapTokenPriceInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBatchSwapTokenPriceInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchSwapTokenPriceInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchSwapTokenPriceInfoInput(GetBatchSwapTokenPriceInfoInput other) : this() {
      tokenPriceQueryList_ = other.tokenPriceQueryList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchSwapTokenPriceInfoInput Clone() {
      return new GetBatchSwapTokenPriceInfoInput(this);
    }

    /// <summary>Field number for the "token_price_query_list" field.</summary>
    public const int TokenPriceQueryListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Price.GetSwapTokenPriceInfoInput> _repeated_tokenPriceQueryList_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.Price.GetSwapTokenPriceInfoInput.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Price.GetSwapTokenPriceInfoInput> tokenPriceQueryList_ = new pbc::RepeatedField<global::AElf.Contracts.Price.GetSwapTokenPriceInfoInput>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Price.GetSwapTokenPriceInfoInput> TokenPriceQueryList {
      get { return tokenPriceQueryList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBatchSwapTokenPriceInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBatchSwapTokenPriceInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tokenPriceQueryList_.Equals(other.tokenPriceQueryList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tokenPriceQueryList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tokenPriceQueryList_.WriteTo(output, _repeated_tokenPriceQueryList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tokenPriceQueryList_.CalculateSize(_repeated_tokenPriceQueryList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBatchSwapTokenPriceInfoInput other) {
      if (other == null) {
        return;
      }
      tokenPriceQueryList_.Add(other.tokenPriceQueryList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tokenPriceQueryList_.AddEntriesFrom(input, _repeated_tokenPriceQueryList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetExchangeTokenPriceInfoInput : pb::IMessage<GetExchangeTokenPriceInfoInput> {
    private static readonly pb::MessageParser<GetExchangeTokenPriceInfoInput> _parser = new pb::MessageParser<GetExchangeTokenPriceInfoInput>(() => new GetExchangeTokenPriceInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetExchangeTokenPriceInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExchangeTokenPriceInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExchangeTokenPriceInfoInput(GetExchangeTokenPriceInfoInput other) : this() {
      organization_ = other.organization_ != null ? other.organization_.Clone() : null;
      tokenSymbol_ = other.tokenSymbol_;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetExchangeTokenPriceInfoInput Clone() {
      return new GetExchangeTokenPriceInfoInput(this);
    }

    /// <summary>Field number for the "organization" field.</summary>
    public const int OrganizationFieldNumber = 1;
    private global::AElf.Types.Address organization_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Organization {
      get { return organization_; }
      set {
        organization_ = value;
      }
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 2;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 3;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetExchangeTokenPriceInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetExchangeTokenPriceInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Organization, other.Organization)) return false;
      if (TokenSymbol != other.TokenSymbol) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (organization_ != null) hash ^= Organization.GetHashCode();
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (organization_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Organization);
      }
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (organization_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Organization);
      }
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetExchangeTokenPriceInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.organization_ != null) {
        if (organization_ == null) {
          Organization = new global::AElf.Types.Address();
        }
        Organization.MergeFrom(other.Organization);
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (organization_ == null) {
              Organization = new global::AElf.Types.Address();
            }
            input.ReadMessage(Organization);
            break;
          }
          case 18: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 26: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBatchExchangeTokenPriceInfoInput : pb::IMessage<GetBatchExchangeTokenPriceInfoInput> {
    private static readonly pb::MessageParser<GetBatchExchangeTokenPriceInfoInput> _parser = new pb::MessageParser<GetBatchExchangeTokenPriceInfoInput>(() => new GetBatchExchangeTokenPriceInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBatchExchangeTokenPriceInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchExchangeTokenPriceInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchExchangeTokenPriceInfoInput(GetBatchExchangeTokenPriceInfoInput other) : this() {
      tokenPriceQueryList_ = other.tokenPriceQueryList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBatchExchangeTokenPriceInfoInput Clone() {
      return new GetBatchExchangeTokenPriceInfoInput(this);
    }

    /// <summary>Field number for the "token_price_query_list" field.</summary>
    public const int TokenPriceQueryListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Price.GetExchangeTokenPriceInfoInput> _repeated_tokenPriceQueryList_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.Price.GetExchangeTokenPriceInfoInput.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Price.GetExchangeTokenPriceInfoInput> tokenPriceQueryList_ = new pbc::RepeatedField<global::AElf.Contracts.Price.GetExchangeTokenPriceInfoInput>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Price.GetExchangeTokenPriceInfoInput> TokenPriceQueryList {
      get { return tokenPriceQueryList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBatchExchangeTokenPriceInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBatchExchangeTokenPriceInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tokenPriceQueryList_.Equals(other.tokenPriceQueryList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tokenPriceQueryList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tokenPriceQueryList_.WriteTo(output, _repeated_tokenPriceQueryList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tokenPriceQueryList_.CalculateSize(_repeated_tokenPriceQueryList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBatchExchangeTokenPriceInfoInput other) {
      if (other == null) {
        return;
      }
      tokenPriceQueryList_.Add(other.tokenPriceQueryList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tokenPriceQueryList_.AddEntriesFrom(input, _repeated_tokenPriceQueryList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchPrices : pb::IMessage<BatchPrices> {
    private static readonly pb::MessageParser<BatchPrices> _parser = new pb::MessageParser<BatchPrices>(() => new BatchPrices());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchPrices> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchPrices() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchPrices(BatchPrices other) : this() {
      tokenPrices_ = other.tokenPrices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchPrices Clone() {
      return new BatchPrices(this);
    }

    /// <summary>Field number for the "tokenPrices" field.</summary>
    public const int TokenPricesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Price.TokenPrice> _repeated_tokenPrices_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.Price.TokenPrice.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Price.TokenPrice> tokenPrices_ = new pbc::RepeatedField<global::AElf.Contracts.Price.TokenPrice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Price.TokenPrice> TokenPrices {
      get { return tokenPrices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchPrices);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchPrices other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tokenPrices_.Equals(other.tokenPrices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tokenPrices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tokenPrices_.WriteTo(output, _repeated_tokenPrices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tokenPrices_.CalculateSize(_repeated_tokenPrices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchPrices other) {
      if (other == null) {
        return;
      }
      tokenPrices_.Add(other.tokenPrices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tokenPrices_.AddEntriesFrom(input, _repeated_tokenPrices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Price : pb::IMessage<Price> {
    private static readonly pb::MessageParser<Price> _parser = new pb::MessageParser<Price>(() => new Price());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Price> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price(Price other) : this() {
      value_ = other.value_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price Clone() {
      return new Price(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Price);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Price other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Price other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
          case 18: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PriceTraceInfo : pb::IMessage<PriceTraceInfo> {
    private static readonly pb::MessageParser<PriceTraceInfo> _parser = new pb::MessageParser<PriceTraceInfo>(() => new PriceTraceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PriceTraceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceTraceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceTraceInfo(PriceTraceInfo other) : this() {
      tracedToken_ = other.tracedToken_;
      tracedPathWeight_ = other.tracedPathWeight_;
      tokenList_ = other.tokenList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PriceTraceInfo Clone() {
      return new PriceTraceInfo(this);
    }

    /// <summary>Field number for the "traced_token" field.</summary>
    public const int TracedTokenFieldNumber = 1;
    private string tracedToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TracedToken {
      get { return tracedToken_; }
      set {
        tracedToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "traced_path_weight" field.</summary>
    public const int TracedPathWeightFieldNumber = 2;
    private int tracedPathWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TracedPathWeight {
      get { return tracedPathWeight_; }
      set {
        tracedPathWeight_ = value;
      }
    }

    /// <summary>Field number for the "token_list" field.</summary>
    public const int TokenListFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_tokenList_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> tokenList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TokenList {
      get { return tokenList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PriceTraceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PriceTraceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TracedToken != other.TracedToken) return false;
      if (TracedPathWeight != other.TracedPathWeight) return false;
      if(!tokenList_.Equals(other.tokenList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TracedToken.Length != 0) hash ^= TracedToken.GetHashCode();
      if (TracedPathWeight != 0) hash ^= TracedPathWeight.GetHashCode();
      hash ^= tokenList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TracedToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TracedToken);
      }
      if (TracedPathWeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TracedPathWeight);
      }
      tokenList_.WriteTo(output, _repeated_tokenList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TracedToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TracedToken);
      }
      if (TracedPathWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TracedPathWeight);
      }
      size += tokenList_.CalculateSize(_repeated_tokenList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PriceTraceInfo other) {
      if (other == null) {
        return;
      }
      if (other.TracedToken.Length != 0) {
        TracedToken = other.TracedToken;
      }
      if (other.TracedPathWeight != 0) {
        TracedPathWeight = other.TracedPathWeight;
      }
      tokenList_.Add(other.tokenList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TracedToken = input.ReadString();
            break;
          }
          case 16: {
            TracedPathWeight = input.ReadInt32();
            break;
          }
          case 26: {
            tokenList_.AddEntriesFrom(input, _repeated_tokenList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IsQueryIdExisted : pb::IMessage<IsQueryIdExisted> {
    private static readonly pb::MessageParser<IsQueryIdExisted> _parser = new pb::MessageParser<IsQueryIdExisted>(() => new IsQueryIdExisted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsQueryIdExisted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsQueryIdExisted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsQueryIdExisted(IsQueryIdExisted other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsQueryIdExisted Clone() {
      return new IsQueryIdExisted(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsQueryIdExisted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsQueryIdExisted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsQueryIdExisted other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthorizedSwapTokenPriceQueryUsers : pb::IMessage<AuthorizedSwapTokenPriceQueryUsers> {
    private static readonly pb::MessageParser<AuthorizedSwapTokenPriceQueryUsers> _parser = new pb::MessageParser<AuthorizedSwapTokenPriceQueryUsers>(() => new AuthorizedSwapTokenPriceQueryUsers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthorizedSwapTokenPriceQueryUsers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthorizedSwapTokenPriceQueryUsers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthorizedSwapTokenPriceQueryUsers(AuthorizedSwapTokenPriceQueryUsers other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthorizedSwapTokenPriceQueryUsers Clone() {
      return new AuthorizedSwapTokenPriceQueryUsers(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> list_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthorizedSwapTokenPriceQueryUsers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthorizedSwapTokenPriceQueryUsers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthorizedSwapTokenPriceQueryUsers other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrganizationList : pb::IMessage<OrganizationList> {
    private static readonly pb::MessageParser<OrganizationList> _parser = new pb::MessageParser<OrganizationList>(() => new OrganizationList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrganizationList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrganizationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrganizationList(OrganizationList other) : this() {
      nodeList_ = other.nodeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrganizationList Clone() {
      return new OrganizationList(this);
    }

    /// <summary>Field number for the "node_list" field.</summary>
    public const int NodeListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_nodeList_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> nodeList_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> NodeList {
      get { return nodeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrganizationList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrganizationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeList_.Equals(other.nodeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodeList_.WriteTo(output, _repeated_nodeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeList_.CalculateSize(_repeated_nodeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrganizationList other) {
      if (other == null) {
        return;
      }
      nodeList_.Add(other.nodeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodeList_.AddEntriesFrom(input, _repeated_nodeList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeOracleInput : pb::IMessage<ChangeOracleInput> {
    private static readonly pb::MessageParser<ChangeOracleInput> _parser = new pb::MessageParser<ChangeOracleInput>(() => new ChangeOracleInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeOracleInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeOracleInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeOracleInput(ChangeOracleInput other) : this() {
      oracle_ = other.oracle_ != null ? other.oracle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeOracleInput Clone() {
      return new ChangeOracleInput(this);
    }

    /// <summary>Field number for the "oracle" field.</summary>
    public const int OracleFieldNumber = 1;
    private global::AElf.Types.Address oracle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Oracle {
      get { return oracle_; }
      set {
        oracle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeOracleInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeOracleInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Oracle, other.Oracle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oracle_ != null) hash ^= Oracle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oracle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Oracle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oracle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oracle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeOracleInput other) {
      if (other == null) {
        return;
      }
      if (other.oracle_ != null) {
        if (oracle_ == null) {
          Oracle = new global::AElf.Types.Address();
        }
        Oracle.MergeFrom(other.Oracle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (oracle_ == null) {
              Oracle = new global::AElf.Types.Address();
            }
            input.ReadMessage(Oracle);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeTracePathLimitInput : pb::IMessage<ChangeTracePathLimitInput> {
    private static readonly pb::MessageParser<ChangeTracePathLimitInput> _parser = new pb::MessageParser<ChangeTracePathLimitInput>(() => new ChangeTracePathLimitInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeTracePathLimitInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTracePathLimitInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTracePathLimitInput(ChangeTracePathLimitInput other) : this() {
      newPathLimit_ = other.newPathLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeTracePathLimitInput Clone() {
      return new ChangeTracePathLimitInput(this);
    }

    /// <summary>Field number for the "new_path_limit" field.</summary>
    public const int NewPathLimitFieldNumber = 1;
    private int newPathLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewPathLimit {
      get { return newPathLimit_; }
      set {
        newPathLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeTracePathLimitInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeTracePathLimitInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewPathLimit != other.NewPathLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewPathLimit != 0) hash ^= NewPathLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewPathLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NewPathLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewPathLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewPathLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeTracePathLimitInput other) {
      if (other == null) {
        return;
      }
      if (other.NewPathLimit != 0) {
        NewPathLimit = other.NewPathLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NewPathLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TracePathLimit : pb::IMessage<TracePathLimit> {
    private static readonly pb::MessageParser<TracePathLimit> _parser = new pb::MessageParser<TracePathLimit>(() => new TracePathLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TracePathLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracePathLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracePathLimit(TracePathLimit other) : this() {
      pathLimit_ = other.pathLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracePathLimit Clone() {
      return new TracePathLimit(this);
    }

    /// <summary>Field number for the "path_limit" field.</summary>
    public const int PathLimitFieldNumber = 1;
    private int pathLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PathLimit {
      get { return pathLimit_; }
      set {
        pathLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TracePathLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TracePathLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PathLimit != other.PathLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PathLimit != 0) hash ^= PathLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PathLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PathLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PathLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PathLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TracePathLimit other) {
      if (other == null) {
        return;
      }
      if (other.PathLimit != 0) {
        PathLimit = other.PathLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PathLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewestSwapPriceUpdated : pb::IMessage<NewestSwapPriceUpdated> {
    private static readonly pb::MessageParser<NewestSwapPriceUpdated> _parser = new pb::MessageParser<NewestSwapPriceUpdated>(() => new NewestSwapPriceUpdated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewestSwapPriceUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewestSwapPriceUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewestSwapPriceUpdated(NewestSwapPriceUpdated other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      price_ = other.price_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewestSwapPriceUpdated Clone() {
      return new NewestSwapPriceUpdated(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 2;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private string price_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 5;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewestSwapPriceUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewestSwapPriceUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      if (Price != other.Price) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(QueryId, other.QueryId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetTokenSymbol);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Price);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Timestamp);
      }
      if (queryId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(QueryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (Price.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewestSwapPriceUpdated other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
          case 26: {
            Price = input.ReadString();
            break;
          }
          case 34: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 42: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewestExchangePriceUpdated : pb::IMessage<NewestExchangePriceUpdated> {
    private static readonly pb::MessageParser<NewestExchangePriceUpdated> _parser = new pb::MessageParser<NewestExchangePriceUpdated>(() => new NewestExchangePriceUpdated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewestExchangePriceUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Price.PriceContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewestExchangePriceUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewestExchangePriceUpdated(NewestExchangePriceUpdated other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      targetTokenSymbol_ = other.targetTokenSymbol_;
      price_ = other.price_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      priceSupplier_ = other.priceSupplier_ != null ? other.priceSupplier_.Clone() : null;
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewestExchangePriceUpdated Clone() {
      return new NewestExchangePriceUpdated(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_token_symbol" field.</summary>
    public const int TargetTokenSymbolFieldNumber = 2;
    private string targetTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetTokenSymbol {
      get { return targetTokenSymbol_; }
      set {
        targetTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private string price_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "price_supplier" field.</summary>
    public const int PriceSupplierFieldNumber = 5;
    private global::AElf.Contracts.Price.OrganizationList priceSupplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Price.OrganizationList PriceSupplier {
      get { return priceSupplier_; }
      set {
        priceSupplier_ = value;
      }
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 6;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewestExchangePriceUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewestExchangePriceUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (TargetTokenSymbol != other.TargetTokenSymbol) return false;
      if (Price != other.Price) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(PriceSupplier, other.PriceSupplier)) return false;
      if (!object.Equals(QueryId, other.QueryId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (TargetTokenSymbol.Length != 0) hash ^= TargetTokenSymbol.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (priceSupplier_ != null) hash ^= PriceSupplier.GetHashCode();
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetTokenSymbol);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Price);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Timestamp);
      }
      if (priceSupplier_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PriceSupplier);
      }
      if (queryId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(QueryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (TargetTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetTokenSymbol);
      }
      if (Price.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (priceSupplier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriceSupplier);
      }
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewestExchangePriceUpdated other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.TargetTokenSymbol.Length != 0) {
        TargetTokenSymbol = other.TargetTokenSymbol;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.priceSupplier_ != null) {
        if (priceSupplier_ == null) {
          PriceSupplier = new global::AElf.Contracts.Price.OrganizationList();
        }
        PriceSupplier.MergeFrom(other.PriceSupplier);
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            TargetTokenSymbol = input.ReadString();
            break;
          }
          case 26: {
            Price = input.ReadString();
            break;
          }
          case 34: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 42: {
            if (priceSupplier_ == null) {
              PriceSupplier = new global::AElf.Contracts.Price.OrganizationList();
            }
            input.ReadMessage(PriceSupplier);
            break;
          }
          case 50: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
