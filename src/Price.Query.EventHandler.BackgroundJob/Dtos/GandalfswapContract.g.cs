// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gandalfswap_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gandalf.Contracts.Swap {

  /// <summary>Holder for reflection information generated from gandalfswap_contract.proto</summary>
  public static partial class GandalfswapContractReflection {

    #region Descriptor
    /// <summary>File descriptor for gandalfswap_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GandalfswapContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpnYW5kYWxmc3dhcF9jb250cmFjdC5wcm90bxoPYWVsZi9jb3JlLnByb3Rv",
            "GhJhZWxmL29wdGlvbnMucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5w",
            "cm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGh9nb29nbGUv",
            "cHJvdG9idWYvdGltZXN0YW1wLnByb3RvIiYKD0NyZWF0ZVBhaXJJbnB1dBIT",
            "CgtzeW1ib2xfcGFpchgBIAEoCSI3ChBDcmVhdGVQYWlyT3V0cHV0EiMKDHBh",
            "aXJfYWRkcmVzcxgBIAEoCzINLmFlbGYuQWRkcmVzcyIfCghQYWlyTGlzdBIT",
            "CgtzeW1ib2xfcGFpchgBIAMoCSLWAQoRQWRkTGlxdWlkaXR5SW5wdXQSEAoI",
            "c3ltYm9sX2EYASABKAkSEAoIc3ltYm9sX2IYAiABKAkSGAoQYW1vdW50X2Ff",
            "ZGVzaXJlZBgDIAEoAxIYChBhbW91bnRfYl9kZXNpcmVkGAQgASgDEhQKDGFt",
            "b3VudF9hX21pbhgFIAEoAxIUCgxhbW91bnRfYl9taW4YBiABKAMSLAoIZGVh",
            "ZGxpbmUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEg8KB2No",
            "YW5uZWwYCCABKAkidQoSQWRkTGlxdWlkaXR5T3V0cHV0EhAKCHN5bWJvbF9h",
            "GAEgASgJEhAKCHN5bWJvbF9iGAIgASgJEhAKCGFtb3VudF9hGAMgASgDEhAK",
            "CGFtb3VudF9iGAQgASgDEhcKD2xpcXVpZGl0eV90b2tlbhgFIAEoAyKuAQoU",
            "UmVtb3ZlTGlxdWlkaXR5SW5wdXQSEAoIc3ltYm9sX2EYASABKAkSEAoIc3lt",
            "Ym9sX2IYAiABKAkSFAoMYW1vdW50X2FfbWluGAMgASgDEhQKDGFtb3VudF9i",
            "X21pbhgEIAEoAxIYChBsaXF1aWRpdHlfcmVtb3ZlGAUgASgDEiwKCGRlYWRs",
            "aW5lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJfChVSZW1v",
            "dmVMaXF1aWRpdHlPdXRwdXQSEAoIYW1vdW50X2EYASABKAMSEAoIYW1vdW50",
            "X2IYAiABKAMSEAoIc3ltYm9sX2EYAyABKAkSEAoIc3ltYm9sX2IYBCABKAki",
            "rgEKG1N3YXBFeGFjdFRva2VuRm9yVG9rZW5JbnB1dBIRCglhbW91bnRfaW4Y",
            "ASABKAMSFgoOYW1vdW50X291dF9taW4YAiABKAMSEQoJc3ltYm9sX2luGAMg",
            "ASgJEhIKCnN5bWJvbF9vdXQYBCABKAkSLAoIZGVhZGxpbmUYBSABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wEg8KB2NoYW5uZWwYBiABKAkirgEK",
            "G1N3YXBUb2tlbkZvckV4YWN0VG9rZW5JbnB1dBISCgphbW91bnRfb3V0GAEg",
            "ASgDEhUKDWFtb3VudF9pbl9tYXgYAiABKAMSEQoJc3ltYm9sX2luGAMgASgJ",
            "EhIKCnN5bWJvbF9vdXQYBCABKAkSLAoIZGVhZGxpbmUYBSABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEg8KB2NoYW5uZWwYBiABKAkiNAoKU3dh",
            "cE91dHB1dBISCgphbW91bnRfb3V0GAEgASgDEhIKCnN5bWJvbF9vdXQYAiAB",
            "KAkiJwoQR2V0UmVzZXJ2ZXNJbnB1dBITCgtzeW1ib2xfcGFpchgBIAMoCSI4",
            "ChFHZXRSZXNlcnZlc091dHB1dBIjCgdyZXN1bHRzGAEgAygLMhIuUmVzZXJ2",
            "ZVBhaXJSZXN1bHQikAEKEVJlc2VydmVQYWlyUmVzdWx0EhMKC3N5bWJvbF9w",
            "YWlyGAEgASgJEhAKCHN5bWJvbF9hGAIgASgJEhAKCHN5bWJvbF9iGAMgASgJ",
            "EhEKCXJlc2VydmVfYRgEIAEoAxIRCglyZXNlcnZlX2IYBSABKAMSHAoUYmxv",
            "Y2tfdGltZXN0YW1wX2xhc3QYBiABKAMiOwoUR2V0VG90YWxTdXBwbHlPdXRw",
            "dXQSIwoHcmVzdWx0cxgBIAMoCzISLlRvdGFsU3VwcGx5UmVzdWx0Ij4KEVRv",
            "dGFsU3VwcGx5UmVzdWx0EhMKC3N5bWJvbF9wYWlyGAEgASgJEhQKDHRvdGFs",
            "X3N1cHBseRgCIAEoAyJPCh5HZXRMaXF1aWRpdHlUb2tlbkJhbGFuY2VPdXRw",
            "dXQSLQoHcmVzdWx0cxgBIAMoCzIcLkxpcXVpZGl0eVRva2VuQmFsYW5jZVJl",
            "c3VsdCJDChtMaXF1aWRpdHlUb2tlbkJhbGFuY2VSZXN1bHQSEwoLc3ltYm9s",
            "X3BhaXIYASABKAkSDwoHYmFsYW5jZRgCIAEoAyJNChBHZXRBbW91bnRJbklu",
            "cHV0EhEKCXN5bWJvbF9pbhgBIAEoCRISCgpzeW1ib2xfb3V0GAIgASgJEhIK",
            "CmFtb3VudF9vdXQYAyABKAMiTQoRR2V0QW1vdW50T3V0SW5wdXQSEQoJc3lt",
            "Ym9sX2luGAEgASgJEhIKCnN5bWJvbF9vdXQYAiABKAkSEQoJYW1vdW50X2lu",
            "GAMgASgDIkIKClF1b3RlSW5wdXQSEAoIc3ltYm9sX2EYASABKAkSEAoIc3lt",
            "Ym9sX2IYAiABKAkSEAoIYW1vdW50X2EYAyABKAMiXgocVHJhbnNmZXJMaXF1",
            "aWRpdHlUb2tlbnNJbnB1dBIZCgJ0bxgBIAEoCzINLmFlbGYuQWRkcmVzcxIT",
            "CgtzeW1ib2xfcGFpchgCIAEoCRIOCgZhbW91bnQYAyABKAMiQAoEUGFpchIY",
            "CgRoYXNoGAEgASgLMgouYWVsZi5IYXNoEh4KB2FkZHJlc3MYAiABKAsyDS5h",
            "ZWxmLkFkZHJlc3MiVAoLUGFpckNyZWF0ZWQSEAoIc3ltYm9sX2EYASABKAkS",
            "EAoIc3ltYm9sX2IYAiABKAkSGwoEcGFpchgDIAEoCzINLmFlbGYuQWRkcmVz",
            "czoEoLsYASK1AQoOTGlxdWlkaXR5QWRkZWQSHQoGc2VuZGVyGAEgASgLMg0u",
            "YWVsZi5BZGRyZXNzEhAKCHN5bWJvbF9hGAIgASgJEhAKCHN5bWJvbF9iGAMg",
            "ASgJEhAKCGFtb3VudF9hGAQgASgDEhAKCGFtb3VudF9iGAUgASgDEhcKD2xp",
            "cXVpZGl0eV90b2tlbhgGIAEoAxIPCgdjaGFubmVsGAcgASgJEgwKBHBhaXIY",
            "CCABKAk6BKC7GAEipgEKEExpcXVpZGl0eVJlbW92ZWQSHQoGc2VuZGVyGAEg",
            "ASgLMg0uYWVsZi5BZGRyZXNzEhAKCHN5bWJvbF9hGAIgASgJEhAKCHN5bWJv",
            "bF9iGAMgASgJEhAKCGFtb3VudF9hGAQgASgDEhAKCGFtb3VudF9iGAUgASgD",
            "EhcKD2xpcXVpZGl0eV90b2tlbhgGIAEoAxIMCgRwYWlyGAcgASgJOgSguxgB",
            "Ir4BCgRTd2FwEh0KBnNlbmRlchgBIAEoCzINLmFlbGYuQWRkcmVzcxIRCglz",
            "eW1ib2xfaW4YAiABKAkSEgoKc3ltYm9sX291dBgDIAEoCRIRCglhbW91bnRf",
            "aW4YBCABKAMSEgoKYW1vdW50X291dBgFIAEoAxIRCgl0b3RhbF9mZWUYBiAB",
            "KAMSEQoJYm9udXNfZmVlGAcgASgDEg8KB2NoYW5uZWwYCCABKAkSDAoEcGFp",
            "chgJIAEoCToEoLsYASJkCgRTeW5jEhAKCHN5bWJvbF9hGAIgASgJEhAKCHN5",
            "bWJvbF9iGAMgASgJEhEKCXJlc2VydmVfYRgEIAEoAxIRCglyZXNlcnZlX2IY",
            "BSABKAMSDAoEcGFpchgGIAEoCToEoLsYATLpCAoTR2FuZGFsZlN3YXBDb250",
            "cmFjdBI+CgpJbml0aWFsaXplEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5IgASMwoKQ3JlYXRlUGFpchIQLkNyZWF0",
            "ZVBhaXJJbnB1dBoRLkNyZWF0ZVBhaXJPdXRwdXQiABI5CgxBZGRMaXF1aWRp",
            "dHkSEi5BZGRMaXF1aWRpdHlJbnB1dBoTLkFkZExpcXVpZGl0eU91dHB1dCIA",
            "EkIKD1JlbW92ZUxpcXVpZGl0eRIVLlJlbW92ZUxpcXVpZGl0eUlucHV0GhYu",
            "UmVtb3ZlTGlxdWlkaXR5T3V0cHV0IgASRQoWU3dhcEV4YWN0VG9rZW5Gb3JU",
            "b2tlbhIcLlN3YXBFeGFjdFRva2VuRm9yVG9rZW5JbnB1dBoLLlN3YXBPdXRw",
            "dXQiABJFChZTd2FwVG9rZW5Gb3JFeGFjdFRva2VuEhwuU3dhcFRva2VuRm9y",
            "RXhhY3RUb2tlbklucHV0GgsuU3dhcE91dHB1dCIAElIKF1RyYW5zZmVyTGlx",
            "dWlkaXR5VG9rZW5zEh0uVHJhbnNmZXJMaXF1aWRpdHlUb2tlbnNJbnB1dBoW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkMKClNldEZlZVJhdGUSGy5nb29n",
            "bGUucHJvdG9idWYuSW50NjRWYWx1ZRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eSIAEjQKCEdldFBhaXJzEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GgkuUGFp",
            "ckxpc3QiBYiJ9wEBEjsKC0dldFJlc2VydmVzEhEuR2V0UmVzZXJ2ZXNJbnB1",
            "dBoSLkdldFJlc2VydmVzT3V0cHV0IgWIifcBARI5Cg5HZXRUb3RhbFN1cHBs",
            "eRIJLlBhaXJMaXN0GhUuR2V0VG90YWxTdXBwbHlPdXRwdXQiBYiJ9wEBEk0K",
            "GEdldExpcXVpZGl0eVRva2VuQmFsYW5jZRIJLlBhaXJMaXN0Gh8uR2V0TGlx",
            "dWlkaXR5VG9rZW5CYWxhbmNlT3V0cHV0IgWIifcBARI8ChBHZXRBY2NvdW50",
            "QXNzZXRzEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GgkuUGFpckxpc3QiBYiJ",
            "9wEBEkQKC0dldEFtb3VudEluEhEuR2V0QW1vdW50SW5JbnB1dBobLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIgWIifcBARJGCgxHZXRBbW91bnRPdXQS",
            "Ei5HZXRBbW91bnRPdXRJbnB1dBobLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZh",
            "bHVlIgWIifcBARI4CgVRdW90ZRILLlF1b3RlSW5wdXQaGy5nb29nbGUucHJv",
            "dG9idWYuSW50NjRWYWx1ZSIFiIn3AQEaNLLM9gEvR2FuZGFsZi5Db250cmFj",
            "dHMuU3dhcC5HYW5kYWxmU3dhcENvbnRyYWN0U3RhdGVCGaoCFkdhbmRhbGYu",
            "Q29udHJhY3RzLlN3YXBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.CreatePairInput), global::Gandalf.Contracts.Swap.CreatePairInput.Parser, new[]{ "SymbolPair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.CreatePairOutput), global::Gandalf.Contracts.Swap.CreatePairOutput.Parser, new[]{ "PairAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.PairList), global::Gandalf.Contracts.Swap.PairList.Parser, new[]{ "SymbolPair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.AddLiquidityInput), global::Gandalf.Contracts.Swap.AddLiquidityInput.Parser, new[]{ "SymbolA", "SymbolB", "AmountADesired", "AmountBDesired", "AmountAMin", "AmountBMin", "Deadline", "Channel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.AddLiquidityOutput), global::Gandalf.Contracts.Swap.AddLiquidityOutput.Parser, new[]{ "SymbolA", "SymbolB", "AmountA", "AmountB", "LiquidityToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.RemoveLiquidityInput), global::Gandalf.Contracts.Swap.RemoveLiquidityInput.Parser, new[]{ "SymbolA", "SymbolB", "AmountAMin", "AmountBMin", "LiquidityRemove", "Deadline" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.RemoveLiquidityOutput), global::Gandalf.Contracts.Swap.RemoveLiquidityOutput.Parser, new[]{ "AmountA", "AmountB", "SymbolA", "SymbolB" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.SwapExactTokenForTokenInput), global::Gandalf.Contracts.Swap.SwapExactTokenForTokenInput.Parser, new[]{ "AmountIn", "AmountOutMin", "SymbolIn", "SymbolOut", "Deadline", "Channel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.SwapTokenForExactTokenInput), global::Gandalf.Contracts.Swap.SwapTokenForExactTokenInput.Parser, new[]{ "AmountOut", "AmountInMax", "SymbolIn", "SymbolOut", "Deadline", "Channel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.SwapOutput), global::Gandalf.Contracts.Swap.SwapOutput.Parser, new[]{ "AmountOut", "SymbolOut" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.GetReservesInput), global::Gandalf.Contracts.Swap.GetReservesInput.Parser, new[]{ "SymbolPair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.GetReservesOutput), global::Gandalf.Contracts.Swap.GetReservesOutput.Parser, new[]{ "Results" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.ReservePairResult), global::Gandalf.Contracts.Swap.ReservePairResult.Parser, new[]{ "SymbolPair", "SymbolA", "SymbolB", "ReserveA", "ReserveB", "BlockTimestampLast" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.GetTotalSupplyOutput), global::Gandalf.Contracts.Swap.GetTotalSupplyOutput.Parser, new[]{ "Results" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.TotalSupplyResult), global::Gandalf.Contracts.Swap.TotalSupplyResult.Parser, new[]{ "SymbolPair", "TotalSupply" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.GetLiquidityTokenBalanceOutput), global::Gandalf.Contracts.Swap.GetLiquidityTokenBalanceOutput.Parser, new[]{ "Results" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.LiquidityTokenBalanceResult), global::Gandalf.Contracts.Swap.LiquidityTokenBalanceResult.Parser, new[]{ "SymbolPair", "Balance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.GetAmountInInput), global::Gandalf.Contracts.Swap.GetAmountInInput.Parser, new[]{ "SymbolIn", "SymbolOut", "AmountOut" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.GetAmountOutInput), global::Gandalf.Contracts.Swap.GetAmountOutInput.Parser, new[]{ "SymbolIn", "SymbolOut", "AmountIn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.QuoteInput), global::Gandalf.Contracts.Swap.QuoteInput.Parser, new[]{ "SymbolA", "SymbolB", "AmountA" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.TransferLiquidityTokensInput), global::Gandalf.Contracts.Swap.TransferLiquidityTokensInput.Parser, new[]{ "To", "SymbolPair", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.Pair), global::Gandalf.Contracts.Swap.Pair.Parser, new[]{ "Hash", "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.PairCreated), global::Gandalf.Contracts.Swap.PairCreated.Parser, new[]{ "SymbolA", "SymbolB", "Pair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.LiquidityAdded), global::Gandalf.Contracts.Swap.LiquidityAdded.Parser, new[]{ "Sender", "SymbolA", "SymbolB", "AmountA", "AmountB", "LiquidityToken", "Channel", "Pair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.LiquidityRemoved), global::Gandalf.Contracts.Swap.LiquidityRemoved.Parser, new[]{ "Sender", "SymbolA", "SymbolB", "AmountA", "AmountB", "LiquidityToken", "Pair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.Swap), global::Gandalf.Contracts.Swap.Swap.Parser, new[]{ "Sender", "SymbolIn", "SymbolOut", "AmountIn", "AmountOut", "TotalFee", "BonusFee", "Channel", "Pair" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.Swap.Sync), global::Gandalf.Contracts.Swap.Sync.Parser, new[]{ "SymbolA", "SymbolB", "ReserveA", "ReserveB", "Pair" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CreatePairInput : pb::IMessage<CreatePairInput> {
    private static readonly pb::MessageParser<CreatePairInput> _parser = new pb::MessageParser<CreatePairInput>(() => new CreatePairInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePairInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePairInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePairInput(CreatePairInput other) : this() {
      symbolPair_ = other.symbolPair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePairInput Clone() {
      return new CreatePairInput(this);
    }

    /// <summary>Field number for the "symbol_pair" field.</summary>
    public const int SymbolPairFieldNumber = 1;
    private string symbolPair_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolPair {
      get { return symbolPair_; }
      set {
        symbolPair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePairInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePairInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolPair != other.SymbolPair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolPair.Length != 0) hash ^= SymbolPair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolPair.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymbolPair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolPair.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolPair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePairInput other) {
      if (other == null) {
        return;
      }
      if (other.SymbolPair.Length != 0) {
        SymbolPair = other.SymbolPair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolPair = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreatePairOutput : pb::IMessage<CreatePairOutput> {
    private static readonly pb::MessageParser<CreatePairOutput> _parser = new pb::MessageParser<CreatePairOutput>(() => new CreatePairOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePairOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePairOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePairOutput(CreatePairOutput other) : this() {
      pairAddress_ = other.pairAddress_ != null ? other.pairAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePairOutput Clone() {
      return new CreatePairOutput(this);
    }

    /// <summary>Field number for the "pair_address" field.</summary>
    public const int PairAddressFieldNumber = 1;
    private global::AElf.Types.Address pairAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address PairAddress {
      get { return pairAddress_; }
      set {
        pairAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePairOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePairOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PairAddress, other.PairAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pairAddress_ != null) hash ^= PairAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pairAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PairAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pairAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PairAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePairOutput other) {
      if (other == null) {
        return;
      }
      if (other.pairAddress_ != null) {
        if (pairAddress_ == null) {
          PairAddress = new global::AElf.Types.Address();
        }
        PairAddress.MergeFrom(other.PairAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pairAddress_ == null) {
              PairAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(PairAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PairList : pb::IMessage<PairList> {
    private static readonly pb::MessageParser<PairList> _parser = new pb::MessageParser<PairList>(() => new PairList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PairList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairList(PairList other) : this() {
      symbolPair_ = other.symbolPair_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairList Clone() {
      return new PairList(this);
    }

    /// <summary>Field number for the "symbol_pair" field.</summary>
    public const int SymbolPairFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_symbolPair_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> symbolPair_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SymbolPair {
      get { return symbolPair_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PairList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PairList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbolPair_.Equals(other.symbolPair_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbolPair_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      symbolPair_.WriteTo(output, _repeated_symbolPair_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += symbolPair_.CalculateSize(_repeated_symbolPair_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PairList other) {
      if (other == null) {
        return;
      }
      symbolPair_.Add(other.symbolPair_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbolPair_.AddEntriesFrom(input, _repeated_symbolPair_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddLiquidityInput : pb::IMessage<AddLiquidityInput> {
    private static readonly pb::MessageParser<AddLiquidityInput> _parser = new pb::MessageParser<AddLiquidityInput>(() => new AddLiquidityInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddLiquidityInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLiquidityInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLiquidityInput(AddLiquidityInput other) : this() {
      symbolA_ = other.symbolA_;
      symbolB_ = other.symbolB_;
      amountADesired_ = other.amountADesired_;
      amountBDesired_ = other.amountBDesired_;
      amountAMin_ = other.amountAMin_;
      amountBMin_ = other.amountBMin_;
      deadline_ = other.deadline_ != null ? other.deadline_.Clone() : null;
      channel_ = other.channel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLiquidityInput Clone() {
      return new AddLiquidityInput(this);
    }

    /// <summary>Field number for the "symbol_a" field.</summary>
    public const int SymbolAFieldNumber = 1;
    private string symbolA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolA {
      get { return symbolA_; }
      set {
        symbolA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_b" field.</summary>
    public const int SymbolBFieldNumber = 2;
    private string symbolB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolB {
      get { return symbolB_; }
      set {
        symbolB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_a_desired" field.</summary>
    public const int AmountADesiredFieldNumber = 3;
    private long amountADesired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountADesired {
      get { return amountADesired_; }
      set {
        amountADesired_ = value;
      }
    }

    /// <summary>Field number for the "amount_b_desired" field.</summary>
    public const int AmountBDesiredFieldNumber = 4;
    private long amountBDesired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountBDesired {
      get { return amountBDesired_; }
      set {
        amountBDesired_ = value;
      }
    }

    /// <summary>Field number for the "amount_a_min" field.</summary>
    public const int AmountAMinFieldNumber = 5;
    private long amountAMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountAMin {
      get { return amountAMin_; }
      set {
        amountAMin_ = value;
      }
    }

    /// <summary>Field number for the "amount_b_min" field.</summary>
    public const int AmountBMinFieldNumber = 6;
    private long amountBMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountBMin {
      get { return amountBMin_; }
      set {
        amountBMin_ = value;
      }
    }

    /// <summary>Field number for the "deadline" field.</summary>
    public const int DeadlineFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deadline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Deadline {
      get { return deadline_; }
      set {
        deadline_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 8;
    private string channel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddLiquidityInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddLiquidityInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolA != other.SymbolA) return false;
      if (SymbolB != other.SymbolB) return false;
      if (AmountADesired != other.AmountADesired) return false;
      if (AmountBDesired != other.AmountBDesired) return false;
      if (AmountAMin != other.AmountAMin) return false;
      if (AmountBMin != other.AmountBMin) return false;
      if (!object.Equals(Deadline, other.Deadline)) return false;
      if (Channel != other.Channel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolA.Length != 0) hash ^= SymbolA.GetHashCode();
      if (SymbolB.Length != 0) hash ^= SymbolB.GetHashCode();
      if (AmountADesired != 0L) hash ^= AmountADesired.GetHashCode();
      if (AmountBDesired != 0L) hash ^= AmountBDesired.GetHashCode();
      if (AmountAMin != 0L) hash ^= AmountAMin.GetHashCode();
      if (AmountBMin != 0L) hash ^= AmountBMin.GetHashCode();
      if (deadline_ != null) hash ^= Deadline.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolA.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymbolA);
      }
      if (SymbolB.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolB);
      }
      if (AmountADesired != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmountADesired);
      }
      if (AmountBDesired != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AmountBDesired);
      }
      if (AmountAMin != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AmountAMin);
      }
      if (AmountBMin != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(AmountBMin);
      }
      if (deadline_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Deadline);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Channel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolA);
      }
      if (SymbolB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolB);
      }
      if (AmountADesired != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountADesired);
      }
      if (AmountBDesired != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountBDesired);
      }
      if (AmountAMin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountAMin);
      }
      if (AmountBMin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountBMin);
      }
      if (deadline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deadline);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddLiquidityInput other) {
      if (other == null) {
        return;
      }
      if (other.SymbolA.Length != 0) {
        SymbolA = other.SymbolA;
      }
      if (other.SymbolB.Length != 0) {
        SymbolB = other.SymbolB;
      }
      if (other.AmountADesired != 0L) {
        AmountADesired = other.AmountADesired;
      }
      if (other.AmountBDesired != 0L) {
        AmountBDesired = other.AmountBDesired;
      }
      if (other.AmountAMin != 0L) {
        AmountAMin = other.AmountAMin;
      }
      if (other.AmountBMin != 0L) {
        AmountBMin = other.AmountBMin;
      }
      if (other.deadline_ != null) {
        if (deadline_ == null) {
          Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Deadline.MergeFrom(other.Deadline);
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolA = input.ReadString();
            break;
          }
          case 18: {
            SymbolB = input.ReadString();
            break;
          }
          case 24: {
            AmountADesired = input.ReadInt64();
            break;
          }
          case 32: {
            AmountBDesired = input.ReadInt64();
            break;
          }
          case 40: {
            AmountAMin = input.ReadInt64();
            break;
          }
          case 48: {
            AmountBMin = input.ReadInt64();
            break;
          }
          case 58: {
            if (deadline_ == null) {
              Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Deadline);
            break;
          }
          case 66: {
            Channel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddLiquidityOutput : pb::IMessage<AddLiquidityOutput> {
    private static readonly pb::MessageParser<AddLiquidityOutput> _parser = new pb::MessageParser<AddLiquidityOutput>(() => new AddLiquidityOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddLiquidityOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLiquidityOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLiquidityOutput(AddLiquidityOutput other) : this() {
      symbolA_ = other.symbolA_;
      symbolB_ = other.symbolB_;
      amountA_ = other.amountA_;
      amountB_ = other.amountB_;
      liquidityToken_ = other.liquidityToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddLiquidityOutput Clone() {
      return new AddLiquidityOutput(this);
    }

    /// <summary>Field number for the "symbol_a" field.</summary>
    public const int SymbolAFieldNumber = 1;
    private string symbolA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolA {
      get { return symbolA_; }
      set {
        symbolA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_b" field.</summary>
    public const int SymbolBFieldNumber = 2;
    private string symbolB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolB {
      get { return symbolB_; }
      set {
        symbolB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_a" field.</summary>
    public const int AmountAFieldNumber = 3;
    private long amountA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountA {
      get { return amountA_; }
      set {
        amountA_ = value;
      }
    }

    /// <summary>Field number for the "amount_b" field.</summary>
    public const int AmountBFieldNumber = 4;
    private long amountB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountB {
      get { return amountB_; }
      set {
        amountB_ = value;
      }
    }

    /// <summary>Field number for the "liquidity_token" field.</summary>
    public const int LiquidityTokenFieldNumber = 5;
    private long liquidityToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LiquidityToken {
      get { return liquidityToken_; }
      set {
        liquidityToken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddLiquidityOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddLiquidityOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolA != other.SymbolA) return false;
      if (SymbolB != other.SymbolB) return false;
      if (AmountA != other.AmountA) return false;
      if (AmountB != other.AmountB) return false;
      if (LiquidityToken != other.LiquidityToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolA.Length != 0) hash ^= SymbolA.GetHashCode();
      if (SymbolB.Length != 0) hash ^= SymbolB.GetHashCode();
      if (AmountA != 0L) hash ^= AmountA.GetHashCode();
      if (AmountB != 0L) hash ^= AmountB.GetHashCode();
      if (LiquidityToken != 0L) hash ^= LiquidityToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolA.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymbolA);
      }
      if (SymbolB.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolB);
      }
      if (AmountA != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmountA);
      }
      if (AmountB != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AmountB);
      }
      if (LiquidityToken != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LiquidityToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolA);
      }
      if (SymbolB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolB);
      }
      if (AmountA != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountA);
      }
      if (AmountB != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountB);
      }
      if (LiquidityToken != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LiquidityToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddLiquidityOutput other) {
      if (other == null) {
        return;
      }
      if (other.SymbolA.Length != 0) {
        SymbolA = other.SymbolA;
      }
      if (other.SymbolB.Length != 0) {
        SymbolB = other.SymbolB;
      }
      if (other.AmountA != 0L) {
        AmountA = other.AmountA;
      }
      if (other.AmountB != 0L) {
        AmountB = other.AmountB;
      }
      if (other.LiquidityToken != 0L) {
        LiquidityToken = other.LiquidityToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolA = input.ReadString();
            break;
          }
          case 18: {
            SymbolB = input.ReadString();
            break;
          }
          case 24: {
            AmountA = input.ReadInt64();
            break;
          }
          case 32: {
            AmountB = input.ReadInt64();
            break;
          }
          case 40: {
            LiquidityToken = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveLiquidityInput : pb::IMessage<RemoveLiquidityInput> {
    private static readonly pb::MessageParser<RemoveLiquidityInput> _parser = new pb::MessageParser<RemoveLiquidityInput>(() => new RemoveLiquidityInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveLiquidityInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityInput(RemoveLiquidityInput other) : this() {
      symbolA_ = other.symbolA_;
      symbolB_ = other.symbolB_;
      amountAMin_ = other.amountAMin_;
      amountBMin_ = other.amountBMin_;
      liquidityRemove_ = other.liquidityRemove_;
      deadline_ = other.deadline_ != null ? other.deadline_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityInput Clone() {
      return new RemoveLiquidityInput(this);
    }

    /// <summary>Field number for the "symbol_a" field.</summary>
    public const int SymbolAFieldNumber = 1;
    private string symbolA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolA {
      get { return symbolA_; }
      set {
        symbolA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_b" field.</summary>
    public const int SymbolBFieldNumber = 2;
    private string symbolB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolB {
      get { return symbolB_; }
      set {
        symbolB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_a_min" field.</summary>
    public const int AmountAMinFieldNumber = 3;
    private long amountAMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountAMin {
      get { return amountAMin_; }
      set {
        amountAMin_ = value;
      }
    }

    /// <summary>Field number for the "amount_b_min" field.</summary>
    public const int AmountBMinFieldNumber = 4;
    private long amountBMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountBMin {
      get { return amountBMin_; }
      set {
        amountBMin_ = value;
      }
    }

    /// <summary>Field number for the "liquidity_remove" field.</summary>
    public const int LiquidityRemoveFieldNumber = 5;
    private long liquidityRemove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LiquidityRemove {
      get { return liquidityRemove_; }
      set {
        liquidityRemove_ = value;
      }
    }

    /// <summary>Field number for the "deadline" field.</summary>
    public const int DeadlineFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deadline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Deadline {
      get { return deadline_; }
      set {
        deadline_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveLiquidityInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveLiquidityInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolA != other.SymbolA) return false;
      if (SymbolB != other.SymbolB) return false;
      if (AmountAMin != other.AmountAMin) return false;
      if (AmountBMin != other.AmountBMin) return false;
      if (LiquidityRemove != other.LiquidityRemove) return false;
      if (!object.Equals(Deadline, other.Deadline)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolA.Length != 0) hash ^= SymbolA.GetHashCode();
      if (SymbolB.Length != 0) hash ^= SymbolB.GetHashCode();
      if (AmountAMin != 0L) hash ^= AmountAMin.GetHashCode();
      if (AmountBMin != 0L) hash ^= AmountBMin.GetHashCode();
      if (LiquidityRemove != 0L) hash ^= LiquidityRemove.GetHashCode();
      if (deadline_ != null) hash ^= Deadline.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolA.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymbolA);
      }
      if (SymbolB.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolB);
      }
      if (AmountAMin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmountAMin);
      }
      if (AmountBMin != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AmountBMin);
      }
      if (LiquidityRemove != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LiquidityRemove);
      }
      if (deadline_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Deadline);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolA);
      }
      if (SymbolB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolB);
      }
      if (AmountAMin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountAMin);
      }
      if (AmountBMin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountBMin);
      }
      if (LiquidityRemove != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LiquidityRemove);
      }
      if (deadline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deadline);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveLiquidityInput other) {
      if (other == null) {
        return;
      }
      if (other.SymbolA.Length != 0) {
        SymbolA = other.SymbolA;
      }
      if (other.SymbolB.Length != 0) {
        SymbolB = other.SymbolB;
      }
      if (other.AmountAMin != 0L) {
        AmountAMin = other.AmountAMin;
      }
      if (other.AmountBMin != 0L) {
        AmountBMin = other.AmountBMin;
      }
      if (other.LiquidityRemove != 0L) {
        LiquidityRemove = other.LiquidityRemove;
      }
      if (other.deadline_ != null) {
        if (deadline_ == null) {
          Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Deadline.MergeFrom(other.Deadline);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolA = input.ReadString();
            break;
          }
          case 18: {
            SymbolB = input.ReadString();
            break;
          }
          case 24: {
            AmountAMin = input.ReadInt64();
            break;
          }
          case 32: {
            AmountBMin = input.ReadInt64();
            break;
          }
          case 40: {
            LiquidityRemove = input.ReadInt64();
            break;
          }
          case 50: {
            if (deadline_ == null) {
              Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Deadline);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveLiquidityOutput : pb::IMessage<RemoveLiquidityOutput> {
    private static readonly pb::MessageParser<RemoveLiquidityOutput> _parser = new pb::MessageParser<RemoveLiquidityOutput>(() => new RemoveLiquidityOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveLiquidityOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityOutput(RemoveLiquidityOutput other) : this() {
      amountA_ = other.amountA_;
      amountB_ = other.amountB_;
      symbolA_ = other.symbolA_;
      symbolB_ = other.symbolB_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityOutput Clone() {
      return new RemoveLiquidityOutput(this);
    }

    /// <summary>Field number for the "amount_a" field.</summary>
    public const int AmountAFieldNumber = 1;
    private long amountA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountA {
      get { return amountA_; }
      set {
        amountA_ = value;
      }
    }

    /// <summary>Field number for the "amount_b" field.</summary>
    public const int AmountBFieldNumber = 2;
    private long amountB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountB {
      get { return amountB_; }
      set {
        amountB_ = value;
      }
    }

    /// <summary>Field number for the "symbol_a" field.</summary>
    public const int SymbolAFieldNumber = 3;
    private string symbolA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolA {
      get { return symbolA_; }
      set {
        symbolA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_b" field.</summary>
    public const int SymbolBFieldNumber = 4;
    private string symbolB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolB {
      get { return symbolB_; }
      set {
        symbolB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveLiquidityOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveLiquidityOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AmountA != other.AmountA) return false;
      if (AmountB != other.AmountB) return false;
      if (SymbolA != other.SymbolA) return false;
      if (SymbolB != other.SymbolB) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AmountA != 0L) hash ^= AmountA.GetHashCode();
      if (AmountB != 0L) hash ^= AmountB.GetHashCode();
      if (SymbolA.Length != 0) hash ^= SymbolA.GetHashCode();
      if (SymbolB.Length != 0) hash ^= SymbolB.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AmountA != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AmountA);
      }
      if (AmountB != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AmountB);
      }
      if (SymbolA.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SymbolA);
      }
      if (SymbolB.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SymbolB);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AmountA != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountA);
      }
      if (AmountB != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountB);
      }
      if (SymbolA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolA);
      }
      if (SymbolB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolB);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveLiquidityOutput other) {
      if (other == null) {
        return;
      }
      if (other.AmountA != 0L) {
        AmountA = other.AmountA;
      }
      if (other.AmountB != 0L) {
        AmountB = other.AmountB;
      }
      if (other.SymbolA.Length != 0) {
        SymbolA = other.SymbolA;
      }
      if (other.SymbolB.Length != 0) {
        SymbolB = other.SymbolB;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AmountA = input.ReadInt64();
            break;
          }
          case 16: {
            AmountB = input.ReadInt64();
            break;
          }
          case 26: {
            SymbolA = input.ReadString();
            break;
          }
          case 34: {
            SymbolB = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapExactTokenForTokenInput : pb::IMessage<SwapExactTokenForTokenInput> {
    private static readonly pb::MessageParser<SwapExactTokenForTokenInput> _parser = new pb::MessageParser<SwapExactTokenForTokenInput>(() => new SwapExactTokenForTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapExactTokenForTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapExactTokenForTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapExactTokenForTokenInput(SwapExactTokenForTokenInput other) : this() {
      amountIn_ = other.amountIn_;
      amountOutMin_ = other.amountOutMin_;
      symbolIn_ = other.symbolIn_;
      symbolOut_ = other.symbolOut_;
      deadline_ = other.deadline_ != null ? other.deadline_.Clone() : null;
      channel_ = other.channel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapExactTokenForTokenInput Clone() {
      return new SwapExactTokenForTokenInput(this);
    }

    /// <summary>Field number for the "amount_in" field.</summary>
    public const int AmountInFieldNumber = 1;
    private long amountIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountIn {
      get { return amountIn_; }
      set {
        amountIn_ = value;
      }
    }

    /// <summary>Field number for the "amount_out_min" field.</summary>
    public const int AmountOutMinFieldNumber = 2;
    private long amountOutMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountOutMin {
      get { return amountOutMin_; }
      set {
        amountOutMin_ = value;
      }
    }

    /// <summary>Field number for the "symbol_in" field.</summary>
    public const int SymbolInFieldNumber = 3;
    private string symbolIn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolIn {
      get { return symbolIn_; }
      set {
        symbolIn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_out" field.</summary>
    public const int SymbolOutFieldNumber = 4;
    private string symbolOut_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolOut {
      get { return symbolOut_; }
      set {
        symbolOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deadline" field.</summary>
    public const int DeadlineFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deadline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Deadline {
      get { return deadline_; }
      set {
        deadline_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 6;
    private string channel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapExactTokenForTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapExactTokenForTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AmountIn != other.AmountIn) return false;
      if (AmountOutMin != other.AmountOutMin) return false;
      if (SymbolIn != other.SymbolIn) return false;
      if (SymbolOut != other.SymbolOut) return false;
      if (!object.Equals(Deadline, other.Deadline)) return false;
      if (Channel != other.Channel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AmountIn != 0L) hash ^= AmountIn.GetHashCode();
      if (AmountOutMin != 0L) hash ^= AmountOutMin.GetHashCode();
      if (SymbolIn.Length != 0) hash ^= SymbolIn.GetHashCode();
      if (SymbolOut.Length != 0) hash ^= SymbolOut.GetHashCode();
      if (deadline_ != null) hash ^= Deadline.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AmountIn != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AmountIn);
      }
      if (AmountOutMin != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AmountOutMin);
      }
      if (SymbolIn.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SymbolIn);
      }
      if (SymbolOut.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SymbolOut);
      }
      if (deadline_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Deadline);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Channel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AmountIn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountIn);
      }
      if (AmountOutMin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountOutMin);
      }
      if (SymbolIn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolIn);
      }
      if (SymbolOut.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolOut);
      }
      if (deadline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deadline);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapExactTokenForTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.AmountIn != 0L) {
        AmountIn = other.AmountIn;
      }
      if (other.AmountOutMin != 0L) {
        AmountOutMin = other.AmountOutMin;
      }
      if (other.SymbolIn.Length != 0) {
        SymbolIn = other.SymbolIn;
      }
      if (other.SymbolOut.Length != 0) {
        SymbolOut = other.SymbolOut;
      }
      if (other.deadline_ != null) {
        if (deadline_ == null) {
          Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Deadline.MergeFrom(other.Deadline);
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AmountIn = input.ReadInt64();
            break;
          }
          case 16: {
            AmountOutMin = input.ReadInt64();
            break;
          }
          case 26: {
            SymbolIn = input.ReadString();
            break;
          }
          case 34: {
            SymbolOut = input.ReadString();
            break;
          }
          case 42: {
            if (deadline_ == null) {
              Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Deadline);
            break;
          }
          case 50: {
            Channel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapTokenForExactTokenInput : pb::IMessage<SwapTokenForExactTokenInput> {
    private static readonly pb::MessageParser<SwapTokenForExactTokenInput> _parser = new pb::MessageParser<SwapTokenForExactTokenInput>(() => new SwapTokenForExactTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapTokenForExactTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokenForExactTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokenForExactTokenInput(SwapTokenForExactTokenInput other) : this() {
      amountOut_ = other.amountOut_;
      amountInMax_ = other.amountInMax_;
      symbolIn_ = other.symbolIn_;
      symbolOut_ = other.symbolOut_;
      deadline_ = other.deadline_ != null ? other.deadline_.Clone() : null;
      channel_ = other.channel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokenForExactTokenInput Clone() {
      return new SwapTokenForExactTokenInput(this);
    }

    /// <summary>Field number for the "amount_out" field.</summary>
    public const int AmountOutFieldNumber = 1;
    private long amountOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountOut {
      get { return amountOut_; }
      set {
        amountOut_ = value;
      }
    }

    /// <summary>Field number for the "amount_in_max" field.</summary>
    public const int AmountInMaxFieldNumber = 2;
    private long amountInMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountInMax {
      get { return amountInMax_; }
      set {
        amountInMax_ = value;
      }
    }

    /// <summary>Field number for the "symbol_in" field.</summary>
    public const int SymbolInFieldNumber = 3;
    private string symbolIn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolIn {
      get { return symbolIn_; }
      set {
        symbolIn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_out" field.</summary>
    public const int SymbolOutFieldNumber = 4;
    private string symbolOut_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolOut {
      get { return symbolOut_; }
      set {
        symbolOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deadline" field.</summary>
    public const int DeadlineFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deadline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Deadline {
      get { return deadline_; }
      set {
        deadline_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 6;
    private string channel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapTokenForExactTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapTokenForExactTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AmountOut != other.AmountOut) return false;
      if (AmountInMax != other.AmountInMax) return false;
      if (SymbolIn != other.SymbolIn) return false;
      if (SymbolOut != other.SymbolOut) return false;
      if (!object.Equals(Deadline, other.Deadline)) return false;
      if (Channel != other.Channel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AmountOut != 0L) hash ^= AmountOut.GetHashCode();
      if (AmountInMax != 0L) hash ^= AmountInMax.GetHashCode();
      if (SymbolIn.Length != 0) hash ^= SymbolIn.GetHashCode();
      if (SymbolOut.Length != 0) hash ^= SymbolOut.GetHashCode();
      if (deadline_ != null) hash ^= Deadline.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AmountOut != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AmountOut);
      }
      if (AmountInMax != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AmountInMax);
      }
      if (SymbolIn.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SymbolIn);
      }
      if (SymbolOut.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SymbolOut);
      }
      if (deadline_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Deadline);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Channel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AmountOut != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountOut);
      }
      if (AmountInMax != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountInMax);
      }
      if (SymbolIn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolIn);
      }
      if (SymbolOut.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolOut);
      }
      if (deadline_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deadline);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapTokenForExactTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.AmountOut != 0L) {
        AmountOut = other.AmountOut;
      }
      if (other.AmountInMax != 0L) {
        AmountInMax = other.AmountInMax;
      }
      if (other.SymbolIn.Length != 0) {
        SymbolIn = other.SymbolIn;
      }
      if (other.SymbolOut.Length != 0) {
        SymbolOut = other.SymbolOut;
      }
      if (other.deadline_ != null) {
        if (deadline_ == null) {
          Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Deadline.MergeFrom(other.Deadline);
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AmountOut = input.ReadInt64();
            break;
          }
          case 16: {
            AmountInMax = input.ReadInt64();
            break;
          }
          case 26: {
            SymbolIn = input.ReadString();
            break;
          }
          case 34: {
            SymbolOut = input.ReadString();
            break;
          }
          case 42: {
            if (deadline_ == null) {
              Deadline = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Deadline);
            break;
          }
          case 50: {
            Channel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SwapOutput : pb::IMessage<SwapOutput> {
    private static readonly pb::MessageParser<SwapOutput> _parser = new pb::MessageParser<SwapOutput>(() => new SwapOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapOutput(SwapOutput other) : this() {
      amountOut_ = other.amountOut_;
      symbolOut_ = other.symbolOut_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapOutput Clone() {
      return new SwapOutput(this);
    }

    /// <summary>Field number for the "amount_out" field.</summary>
    public const int AmountOutFieldNumber = 1;
    private long amountOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountOut {
      get { return amountOut_; }
      set {
        amountOut_ = value;
      }
    }

    /// <summary>Field number for the "symbol_out" field.</summary>
    public const int SymbolOutFieldNumber = 2;
    private string symbolOut_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolOut {
      get { return symbolOut_; }
      set {
        symbolOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AmountOut != other.AmountOut) return false;
      if (SymbolOut != other.SymbolOut) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AmountOut != 0L) hash ^= AmountOut.GetHashCode();
      if (SymbolOut.Length != 0) hash ^= SymbolOut.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AmountOut != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AmountOut);
      }
      if (SymbolOut.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolOut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AmountOut != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountOut);
      }
      if (SymbolOut.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolOut);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapOutput other) {
      if (other == null) {
        return;
      }
      if (other.AmountOut != 0L) {
        AmountOut = other.AmountOut;
      }
      if (other.SymbolOut.Length != 0) {
        SymbolOut = other.SymbolOut;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AmountOut = input.ReadInt64();
            break;
          }
          case 18: {
            SymbolOut = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetReservesInput : pb::IMessage<GetReservesInput> {
    private static readonly pb::MessageParser<GetReservesInput> _parser = new pb::MessageParser<GetReservesInput>(() => new GetReservesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReservesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReservesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReservesInput(GetReservesInput other) : this() {
      symbolPair_ = other.symbolPair_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReservesInput Clone() {
      return new GetReservesInput(this);
    }

    /// <summary>Field number for the "symbol_pair" field.</summary>
    public const int SymbolPairFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_symbolPair_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> symbolPair_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SymbolPair {
      get { return symbolPair_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReservesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReservesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbolPair_.Equals(other.symbolPair_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbolPair_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      symbolPair_.WriteTo(output, _repeated_symbolPair_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += symbolPair_.CalculateSize(_repeated_symbolPair_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReservesInput other) {
      if (other == null) {
        return;
      }
      symbolPair_.Add(other.symbolPair_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbolPair_.AddEntriesFrom(input, _repeated_symbolPair_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetReservesOutput : pb::IMessage<GetReservesOutput> {
    private static readonly pb::MessageParser<GetReservesOutput> _parser = new pb::MessageParser<GetReservesOutput>(() => new GetReservesOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReservesOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReservesOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReservesOutput(GetReservesOutput other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReservesOutput Clone() {
      return new GetReservesOutput(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gandalf.Contracts.Swap.ReservePairResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::Gandalf.Contracts.Swap.ReservePairResult.Parser);
    private readonly pbc::RepeatedField<global::Gandalf.Contracts.Swap.ReservePairResult> results_ = new pbc::RepeatedField<global::Gandalf.Contracts.Swap.ReservePairResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gandalf.Contracts.Swap.ReservePairResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReservesOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReservesOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReservesOutput other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReservePairResult : pb::IMessage<ReservePairResult> {
    private static readonly pb::MessageParser<ReservePairResult> _parser = new pb::MessageParser<ReservePairResult>(() => new ReservePairResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReservePairResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservePairResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservePairResult(ReservePairResult other) : this() {
      symbolPair_ = other.symbolPair_;
      symbolA_ = other.symbolA_;
      symbolB_ = other.symbolB_;
      reserveA_ = other.reserveA_;
      reserveB_ = other.reserveB_;
      blockTimestampLast_ = other.blockTimestampLast_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReservePairResult Clone() {
      return new ReservePairResult(this);
    }

    /// <summary>Field number for the "symbol_pair" field.</summary>
    public const int SymbolPairFieldNumber = 1;
    private string symbolPair_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolPair {
      get { return symbolPair_; }
      set {
        symbolPair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_a" field.</summary>
    public const int SymbolAFieldNumber = 2;
    private string symbolA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolA {
      get { return symbolA_; }
      set {
        symbolA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_b" field.</summary>
    public const int SymbolBFieldNumber = 3;
    private string symbolB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolB {
      get { return symbolB_; }
      set {
        symbolB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reserve_a" field.</summary>
    public const int ReserveAFieldNumber = 4;
    private long reserveA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReserveA {
      get { return reserveA_; }
      set {
        reserveA_ = value;
      }
    }

    /// <summary>Field number for the "reserve_b" field.</summary>
    public const int ReserveBFieldNumber = 5;
    private long reserveB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReserveB {
      get { return reserveB_; }
      set {
        reserveB_ = value;
      }
    }

    /// <summary>Field number for the "block_timestamp_last" field.</summary>
    public const int BlockTimestampLastFieldNumber = 6;
    private long blockTimestampLast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockTimestampLast {
      get { return blockTimestampLast_; }
      set {
        blockTimestampLast_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReservePairResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReservePairResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolPair != other.SymbolPair) return false;
      if (SymbolA != other.SymbolA) return false;
      if (SymbolB != other.SymbolB) return false;
      if (ReserveA != other.ReserveA) return false;
      if (ReserveB != other.ReserveB) return false;
      if (BlockTimestampLast != other.BlockTimestampLast) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolPair.Length != 0) hash ^= SymbolPair.GetHashCode();
      if (SymbolA.Length != 0) hash ^= SymbolA.GetHashCode();
      if (SymbolB.Length != 0) hash ^= SymbolB.GetHashCode();
      if (ReserveA != 0L) hash ^= ReserveA.GetHashCode();
      if (ReserveB != 0L) hash ^= ReserveB.GetHashCode();
      if (BlockTimestampLast != 0L) hash ^= BlockTimestampLast.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolPair.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymbolPair);
      }
      if (SymbolA.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolA);
      }
      if (SymbolB.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SymbolB);
      }
      if (ReserveA != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ReserveA);
      }
      if (ReserveB != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ReserveB);
      }
      if (BlockTimestampLast != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(BlockTimestampLast);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolPair.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolPair);
      }
      if (SymbolA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolA);
      }
      if (SymbolB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolB);
      }
      if (ReserveA != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReserveA);
      }
      if (ReserveB != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReserveB);
      }
      if (BlockTimestampLast != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockTimestampLast);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReservePairResult other) {
      if (other == null) {
        return;
      }
      if (other.SymbolPair.Length != 0) {
        SymbolPair = other.SymbolPair;
      }
      if (other.SymbolA.Length != 0) {
        SymbolA = other.SymbolA;
      }
      if (other.SymbolB.Length != 0) {
        SymbolB = other.SymbolB;
      }
      if (other.ReserveA != 0L) {
        ReserveA = other.ReserveA;
      }
      if (other.ReserveB != 0L) {
        ReserveB = other.ReserveB;
      }
      if (other.BlockTimestampLast != 0L) {
        BlockTimestampLast = other.BlockTimestampLast;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolPair = input.ReadString();
            break;
          }
          case 18: {
            SymbolA = input.ReadString();
            break;
          }
          case 26: {
            SymbolB = input.ReadString();
            break;
          }
          case 32: {
            ReserveA = input.ReadInt64();
            break;
          }
          case 40: {
            ReserveB = input.ReadInt64();
            break;
          }
          case 48: {
            BlockTimestampLast = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTotalSupplyOutput : pb::IMessage<GetTotalSupplyOutput> {
    private static readonly pb::MessageParser<GetTotalSupplyOutput> _parser = new pb::MessageParser<GetTotalSupplyOutput>(() => new GetTotalSupplyOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTotalSupplyOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTotalSupplyOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTotalSupplyOutput(GetTotalSupplyOutput other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTotalSupplyOutput Clone() {
      return new GetTotalSupplyOutput(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gandalf.Contracts.Swap.TotalSupplyResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::Gandalf.Contracts.Swap.TotalSupplyResult.Parser);
    private readonly pbc::RepeatedField<global::Gandalf.Contracts.Swap.TotalSupplyResult> results_ = new pbc::RepeatedField<global::Gandalf.Contracts.Swap.TotalSupplyResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gandalf.Contracts.Swap.TotalSupplyResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTotalSupplyOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTotalSupplyOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTotalSupplyOutput other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TotalSupplyResult : pb::IMessage<TotalSupplyResult> {
    private static readonly pb::MessageParser<TotalSupplyResult> _parser = new pb::MessageParser<TotalSupplyResult>(() => new TotalSupplyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TotalSupplyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalSupplyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalSupplyResult(TotalSupplyResult other) : this() {
      symbolPair_ = other.symbolPair_;
      totalSupply_ = other.totalSupply_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TotalSupplyResult Clone() {
      return new TotalSupplyResult(this);
    }

    /// <summary>Field number for the "symbol_pair" field.</summary>
    public const int SymbolPairFieldNumber = 1;
    private string symbolPair_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolPair {
      get { return symbolPair_; }
      set {
        symbolPair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_supply" field.</summary>
    public const int TotalSupplyFieldNumber = 2;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TotalSupplyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TotalSupplyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolPair != other.SymbolPair) return false;
      if (TotalSupply != other.TotalSupply) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolPair.Length != 0) hash ^= SymbolPair.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolPair.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymbolPair);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalSupply);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolPair.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolPair);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSupply);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TotalSupplyResult other) {
      if (other == null) {
        return;
      }
      if (other.SymbolPair.Length != 0) {
        SymbolPair = other.SymbolPair;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolPair = input.ReadString();
            break;
          }
          case 16: {
            TotalSupply = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLiquidityTokenBalanceOutput : pb::IMessage<GetLiquidityTokenBalanceOutput> {
    private static readonly pb::MessageParser<GetLiquidityTokenBalanceOutput> _parser = new pb::MessageParser<GetLiquidityTokenBalanceOutput>(() => new GetLiquidityTokenBalanceOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLiquidityTokenBalanceOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLiquidityTokenBalanceOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLiquidityTokenBalanceOutput(GetLiquidityTokenBalanceOutput other) : this() {
      results_ = other.results_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLiquidityTokenBalanceOutput Clone() {
      return new GetLiquidityTokenBalanceOutput(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gandalf.Contracts.Swap.LiquidityTokenBalanceResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::Gandalf.Contracts.Swap.LiquidityTokenBalanceResult.Parser);
    private readonly pbc::RepeatedField<global::Gandalf.Contracts.Swap.LiquidityTokenBalanceResult> results_ = new pbc::RepeatedField<global::Gandalf.Contracts.Swap.LiquidityTokenBalanceResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gandalf.Contracts.Swap.LiquidityTokenBalanceResult> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLiquidityTokenBalanceOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLiquidityTokenBalanceOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLiquidityTokenBalanceOutput other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiquidityTokenBalanceResult : pb::IMessage<LiquidityTokenBalanceResult> {
    private static readonly pb::MessageParser<LiquidityTokenBalanceResult> _parser = new pb::MessageParser<LiquidityTokenBalanceResult>(() => new LiquidityTokenBalanceResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiquidityTokenBalanceResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityTokenBalanceResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityTokenBalanceResult(LiquidityTokenBalanceResult other) : this() {
      symbolPair_ = other.symbolPair_;
      balance_ = other.balance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityTokenBalanceResult Clone() {
      return new LiquidityTokenBalanceResult(this);
    }

    /// <summary>Field number for the "symbol_pair" field.</summary>
    public const int SymbolPairFieldNumber = 1;
    private string symbolPair_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolPair {
      get { return symbolPair_; }
      set {
        symbolPair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 2;
    private long balance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiquidityTokenBalanceResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiquidityTokenBalanceResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolPair != other.SymbolPair) return false;
      if (Balance != other.Balance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolPair.Length != 0) hash ^= SymbolPair.GetHashCode();
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolPair.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymbolPair);
      }
      if (Balance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Balance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolPair.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolPair);
      }
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiquidityTokenBalanceResult other) {
      if (other == null) {
        return;
      }
      if (other.SymbolPair.Length != 0) {
        SymbolPair = other.SymbolPair;
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolPair = input.ReadString();
            break;
          }
          case 16: {
            Balance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAmountInInput : pb::IMessage<GetAmountInInput> {
    private static readonly pb::MessageParser<GetAmountInInput> _parser = new pb::MessageParser<GetAmountInInput>(() => new GetAmountInInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAmountInInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAmountInInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAmountInInput(GetAmountInInput other) : this() {
      symbolIn_ = other.symbolIn_;
      symbolOut_ = other.symbolOut_;
      amountOut_ = other.amountOut_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAmountInInput Clone() {
      return new GetAmountInInput(this);
    }

    /// <summary>Field number for the "symbol_in" field.</summary>
    public const int SymbolInFieldNumber = 1;
    private string symbolIn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolIn {
      get { return symbolIn_; }
      set {
        symbolIn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_out" field.</summary>
    public const int SymbolOutFieldNumber = 2;
    private string symbolOut_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolOut {
      get { return symbolOut_; }
      set {
        symbolOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_out" field.</summary>
    public const int AmountOutFieldNumber = 3;
    private long amountOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountOut {
      get { return amountOut_; }
      set {
        amountOut_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAmountInInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAmountInInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolIn != other.SymbolIn) return false;
      if (SymbolOut != other.SymbolOut) return false;
      if (AmountOut != other.AmountOut) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolIn.Length != 0) hash ^= SymbolIn.GetHashCode();
      if (SymbolOut.Length != 0) hash ^= SymbolOut.GetHashCode();
      if (AmountOut != 0L) hash ^= AmountOut.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolIn.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymbolIn);
      }
      if (SymbolOut.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolOut);
      }
      if (AmountOut != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmountOut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolIn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolIn);
      }
      if (SymbolOut.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolOut);
      }
      if (AmountOut != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountOut);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAmountInInput other) {
      if (other == null) {
        return;
      }
      if (other.SymbolIn.Length != 0) {
        SymbolIn = other.SymbolIn;
      }
      if (other.SymbolOut.Length != 0) {
        SymbolOut = other.SymbolOut;
      }
      if (other.AmountOut != 0L) {
        AmountOut = other.AmountOut;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolIn = input.ReadString();
            break;
          }
          case 18: {
            SymbolOut = input.ReadString();
            break;
          }
          case 24: {
            AmountOut = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAmountOutInput : pb::IMessage<GetAmountOutInput> {
    private static readonly pb::MessageParser<GetAmountOutInput> _parser = new pb::MessageParser<GetAmountOutInput>(() => new GetAmountOutInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAmountOutInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAmountOutInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAmountOutInput(GetAmountOutInput other) : this() {
      symbolIn_ = other.symbolIn_;
      symbolOut_ = other.symbolOut_;
      amountIn_ = other.amountIn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAmountOutInput Clone() {
      return new GetAmountOutInput(this);
    }

    /// <summary>Field number for the "symbol_in" field.</summary>
    public const int SymbolInFieldNumber = 1;
    private string symbolIn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolIn {
      get { return symbolIn_; }
      set {
        symbolIn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_out" field.</summary>
    public const int SymbolOutFieldNumber = 2;
    private string symbolOut_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolOut {
      get { return symbolOut_; }
      set {
        symbolOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_in" field.</summary>
    public const int AmountInFieldNumber = 3;
    private long amountIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountIn {
      get { return amountIn_; }
      set {
        amountIn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAmountOutInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAmountOutInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolIn != other.SymbolIn) return false;
      if (SymbolOut != other.SymbolOut) return false;
      if (AmountIn != other.AmountIn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolIn.Length != 0) hash ^= SymbolIn.GetHashCode();
      if (SymbolOut.Length != 0) hash ^= SymbolOut.GetHashCode();
      if (AmountIn != 0L) hash ^= AmountIn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolIn.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymbolIn);
      }
      if (SymbolOut.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolOut);
      }
      if (AmountIn != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmountIn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolIn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolIn);
      }
      if (SymbolOut.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolOut);
      }
      if (AmountIn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountIn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAmountOutInput other) {
      if (other == null) {
        return;
      }
      if (other.SymbolIn.Length != 0) {
        SymbolIn = other.SymbolIn;
      }
      if (other.SymbolOut.Length != 0) {
        SymbolOut = other.SymbolOut;
      }
      if (other.AmountIn != 0L) {
        AmountIn = other.AmountIn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolIn = input.ReadString();
            break;
          }
          case 18: {
            SymbolOut = input.ReadString();
            break;
          }
          case 24: {
            AmountIn = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuoteInput : pb::IMessage<QuoteInput> {
    private static readonly pb::MessageParser<QuoteInput> _parser = new pb::MessageParser<QuoteInput>(() => new QuoteInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuoteInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteInput(QuoteInput other) : this() {
      symbolA_ = other.symbolA_;
      symbolB_ = other.symbolB_;
      amountA_ = other.amountA_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuoteInput Clone() {
      return new QuoteInput(this);
    }

    /// <summary>Field number for the "symbol_a" field.</summary>
    public const int SymbolAFieldNumber = 1;
    private string symbolA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolA {
      get { return symbolA_; }
      set {
        symbolA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_b" field.</summary>
    public const int SymbolBFieldNumber = 2;
    private string symbolB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolB {
      get { return symbolB_; }
      set {
        symbolB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_a" field.</summary>
    public const int AmountAFieldNumber = 3;
    private long amountA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountA {
      get { return amountA_; }
      set {
        amountA_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuoteInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuoteInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolA != other.SymbolA) return false;
      if (SymbolB != other.SymbolB) return false;
      if (AmountA != other.AmountA) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolA.Length != 0) hash ^= SymbolA.GetHashCode();
      if (SymbolB.Length != 0) hash ^= SymbolB.GetHashCode();
      if (AmountA != 0L) hash ^= AmountA.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolA.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymbolA);
      }
      if (SymbolB.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolB);
      }
      if (AmountA != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmountA);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolA);
      }
      if (SymbolB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolB);
      }
      if (AmountA != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountA);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuoteInput other) {
      if (other == null) {
        return;
      }
      if (other.SymbolA.Length != 0) {
        SymbolA = other.SymbolA;
      }
      if (other.SymbolB.Length != 0) {
        SymbolB = other.SymbolB;
      }
      if (other.AmountA != 0L) {
        AmountA = other.AmountA;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolA = input.ReadString();
            break;
          }
          case 18: {
            SymbolB = input.ReadString();
            break;
          }
          case 24: {
            AmountA = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferLiquidityTokensInput : pb::IMessage<TransferLiquidityTokensInput> {
    private static readonly pb::MessageParser<TransferLiquidityTokensInput> _parser = new pb::MessageParser<TransferLiquidityTokensInput>(() => new TransferLiquidityTokensInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferLiquidityTokensInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferLiquidityTokensInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferLiquidityTokensInput(TransferLiquidityTokensInput other) : this() {
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbolPair_ = other.symbolPair_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferLiquidityTokensInput Clone() {
      return new TransferLiquidityTokensInput(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol_pair" field.</summary>
    public const int SymbolPairFieldNumber = 2;
    private string symbolPair_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolPair {
      get { return symbolPair_; }
      set {
        symbolPair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferLiquidityTokensInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferLiquidityTokensInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(To, other.To)) return false;
      if (SymbolPair != other.SymbolPair) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (to_ != null) hash ^= To.GetHashCode();
      if (SymbolPair.Length != 0) hash ^= SymbolPair.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (to_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(To);
      }
      if (SymbolPair.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolPair);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (SymbolPair.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolPair);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferLiquidityTokensInput other) {
      if (other == null) {
        return;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.SymbolPair.Length != 0) {
        SymbolPair = other.SymbolPair;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 18: {
            SymbolPair = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pair : pb::IMessage<Pair> {
    private static readonly pb::MessageParser<Pair> _parser = new pb::MessageParser<Pair>(() => new Pair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair(Pair other) : this() {
      hash_ = other.hash_ != null ? other.hash_.Clone() : null;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair Clone() {
      return new Pair(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private global::AElf.Types.Hash hash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Hash {
      get { return hash_; }
      set {
        hash_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hash, other.Hash)) return false;
      if (!object.Equals(Address, other.Address)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hash_ != null) hash ^= Hash.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hash_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hash);
      }
      if (address_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hash);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pair other) {
      if (other == null) {
        return;
      }
      if (other.hash_ != null) {
        if (hash_ == null) {
          Hash = new global::AElf.Types.Hash();
        }
        Hash.MergeFrom(other.Hash);
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hash_ == null) {
              Hash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Hash);
            break;
          }
          case 18: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PairCreated : pb::IMessage<PairCreated> {
    private static readonly pb::MessageParser<PairCreated> _parser = new pb::MessageParser<PairCreated>(() => new PairCreated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PairCreated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairCreated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairCreated(PairCreated other) : this() {
      symbolA_ = other.symbolA_;
      symbolB_ = other.symbolB_;
      pair_ = other.pair_ != null ? other.pair_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairCreated Clone() {
      return new PairCreated(this);
    }

    /// <summary>Field number for the "symbol_a" field.</summary>
    public const int SymbolAFieldNumber = 1;
    private string symbolA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolA {
      get { return symbolA_; }
      set {
        symbolA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_b" field.</summary>
    public const int SymbolBFieldNumber = 2;
    private string symbolB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolB {
      get { return symbolB_; }
      set {
        symbolB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pair" field.</summary>
    public const int PairFieldNumber = 3;
    private global::AElf.Types.Address pair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Pair {
      get { return pair_; }
      set {
        pair_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PairCreated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PairCreated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolA != other.SymbolA) return false;
      if (SymbolB != other.SymbolB) return false;
      if (!object.Equals(Pair, other.Pair)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolA.Length != 0) hash ^= SymbolA.GetHashCode();
      if (SymbolB.Length != 0) hash ^= SymbolB.GetHashCode();
      if (pair_ != null) hash ^= Pair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolA.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SymbolA);
      }
      if (SymbolB.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolB);
      }
      if (pair_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolA);
      }
      if (SymbolB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolB);
      }
      if (pair_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PairCreated other) {
      if (other == null) {
        return;
      }
      if (other.SymbolA.Length != 0) {
        SymbolA = other.SymbolA;
      }
      if (other.SymbolB.Length != 0) {
        SymbolB = other.SymbolB;
      }
      if (other.pair_ != null) {
        if (pair_ == null) {
          Pair = new global::AElf.Types.Address();
        }
        Pair.MergeFrom(other.Pair);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SymbolA = input.ReadString();
            break;
          }
          case 18: {
            SymbolB = input.ReadString();
            break;
          }
          case 26: {
            if (pair_ == null) {
              Pair = new global::AElf.Types.Address();
            }
            input.ReadMessage(Pair);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiquidityAdded : pb::IMessage<LiquidityAdded> {
    private static readonly pb::MessageParser<LiquidityAdded> _parser = new pb::MessageParser<LiquidityAdded>(() => new LiquidityAdded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiquidityAdded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityAdded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityAdded(LiquidityAdded other) : this() {
      sender_ = other.sender_ != null ? other.sender_.Clone() : null;
      symbolA_ = other.symbolA_;
      symbolB_ = other.symbolB_;
      amountA_ = other.amountA_;
      amountB_ = other.amountB_;
      liquidityToken_ = other.liquidityToken_;
      channel_ = other.channel_;
      pair_ = other.pair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityAdded Clone() {
      return new LiquidityAdded(this);
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 1;
    private global::AElf.Types.Address sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "symbol_a" field.</summary>
    public const int SymbolAFieldNumber = 2;
    private string symbolA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolA {
      get { return symbolA_; }
      set {
        symbolA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_b" field.</summary>
    public const int SymbolBFieldNumber = 3;
    private string symbolB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolB {
      get { return symbolB_; }
      set {
        symbolB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_a" field.</summary>
    public const int AmountAFieldNumber = 4;
    private long amountA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountA {
      get { return amountA_; }
      set {
        amountA_ = value;
      }
    }

    /// <summary>Field number for the "amount_b" field.</summary>
    public const int AmountBFieldNumber = 5;
    private long amountB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountB {
      get { return amountB_; }
      set {
        amountB_ = value;
      }
    }

    /// <summary>Field number for the "liquidity_token" field.</summary>
    public const int LiquidityTokenFieldNumber = 6;
    private long liquidityToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LiquidityToken {
      get { return liquidityToken_; }
      set {
        liquidityToken_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 7;
    private string channel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pair" field.</summary>
    public const int PairFieldNumber = 8;
    private string pair_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pair {
      get { return pair_; }
      set {
        pair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiquidityAdded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiquidityAdded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sender, other.Sender)) return false;
      if (SymbolA != other.SymbolA) return false;
      if (SymbolB != other.SymbolB) return false;
      if (AmountA != other.AmountA) return false;
      if (AmountB != other.AmountB) return false;
      if (LiquidityToken != other.LiquidityToken) return false;
      if (Channel != other.Channel) return false;
      if (Pair != other.Pair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sender_ != null) hash ^= Sender.GetHashCode();
      if (SymbolA.Length != 0) hash ^= SymbolA.GetHashCode();
      if (SymbolB.Length != 0) hash ^= SymbolB.GetHashCode();
      if (AmountA != 0L) hash ^= AmountA.GetHashCode();
      if (AmountB != 0L) hash ^= AmountB.GetHashCode();
      if (LiquidityToken != 0L) hash ^= LiquidityToken.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Pair.Length != 0) hash ^= Pair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sender);
      }
      if (SymbolA.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolA);
      }
      if (SymbolB.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SymbolB);
      }
      if (AmountA != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AmountA);
      }
      if (AmountB != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AmountB);
      }
      if (LiquidityToken != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LiquidityToken);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Channel);
      }
      if (Pair.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Pair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      if (SymbolA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolA);
      }
      if (SymbolB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolB);
      }
      if (AmountA != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountA);
      }
      if (AmountB != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountB);
      }
      if (LiquidityToken != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LiquidityToken);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Pair.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiquidityAdded other) {
      if (other == null) {
        return;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          Sender = new global::AElf.Types.Address();
        }
        Sender.MergeFrom(other.Sender);
      }
      if (other.SymbolA.Length != 0) {
        SymbolA = other.SymbolA;
      }
      if (other.SymbolB.Length != 0) {
        SymbolB = other.SymbolB;
      }
      if (other.AmountA != 0L) {
        AmountA = other.AmountA;
      }
      if (other.AmountB != 0L) {
        AmountB = other.AmountB;
      }
      if (other.LiquidityToken != 0L) {
        LiquidityToken = other.LiquidityToken;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Pair.Length != 0) {
        Pair = other.Pair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sender_ == null) {
              Sender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Sender);
            break;
          }
          case 18: {
            SymbolA = input.ReadString();
            break;
          }
          case 26: {
            SymbolB = input.ReadString();
            break;
          }
          case 32: {
            AmountA = input.ReadInt64();
            break;
          }
          case 40: {
            AmountB = input.ReadInt64();
            break;
          }
          case 48: {
            LiquidityToken = input.ReadInt64();
            break;
          }
          case 58: {
            Channel = input.ReadString();
            break;
          }
          case 66: {
            Pair = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiquidityRemoved : pb::IMessage<LiquidityRemoved> {
    private static readonly pb::MessageParser<LiquidityRemoved> _parser = new pb::MessageParser<LiquidityRemoved>(() => new LiquidityRemoved());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiquidityRemoved> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityRemoved() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityRemoved(LiquidityRemoved other) : this() {
      sender_ = other.sender_ != null ? other.sender_.Clone() : null;
      symbolA_ = other.symbolA_;
      symbolB_ = other.symbolB_;
      amountA_ = other.amountA_;
      amountB_ = other.amountB_;
      liquidityToken_ = other.liquidityToken_;
      pair_ = other.pair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiquidityRemoved Clone() {
      return new LiquidityRemoved(this);
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 1;
    private global::AElf.Types.Address sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "symbol_a" field.</summary>
    public const int SymbolAFieldNumber = 2;
    private string symbolA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolA {
      get { return symbolA_; }
      set {
        symbolA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_b" field.</summary>
    public const int SymbolBFieldNumber = 3;
    private string symbolB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolB {
      get { return symbolB_; }
      set {
        symbolB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_a" field.</summary>
    public const int AmountAFieldNumber = 4;
    private long amountA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountA {
      get { return amountA_; }
      set {
        amountA_ = value;
      }
    }

    /// <summary>Field number for the "amount_b" field.</summary>
    public const int AmountBFieldNumber = 5;
    private long amountB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountB {
      get { return amountB_; }
      set {
        amountB_ = value;
      }
    }

    /// <summary>Field number for the "liquidity_token" field.</summary>
    public const int LiquidityTokenFieldNumber = 6;
    private long liquidityToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LiquidityToken {
      get { return liquidityToken_; }
      set {
        liquidityToken_ = value;
      }
    }

    /// <summary>Field number for the "pair" field.</summary>
    public const int PairFieldNumber = 7;
    private string pair_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pair {
      get { return pair_; }
      set {
        pair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiquidityRemoved);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiquidityRemoved other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sender, other.Sender)) return false;
      if (SymbolA != other.SymbolA) return false;
      if (SymbolB != other.SymbolB) return false;
      if (AmountA != other.AmountA) return false;
      if (AmountB != other.AmountB) return false;
      if (LiquidityToken != other.LiquidityToken) return false;
      if (Pair != other.Pair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sender_ != null) hash ^= Sender.GetHashCode();
      if (SymbolA.Length != 0) hash ^= SymbolA.GetHashCode();
      if (SymbolB.Length != 0) hash ^= SymbolB.GetHashCode();
      if (AmountA != 0L) hash ^= AmountA.GetHashCode();
      if (AmountB != 0L) hash ^= AmountB.GetHashCode();
      if (LiquidityToken != 0L) hash ^= LiquidityToken.GetHashCode();
      if (Pair.Length != 0) hash ^= Pair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sender);
      }
      if (SymbolA.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolA);
      }
      if (SymbolB.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SymbolB);
      }
      if (AmountA != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AmountA);
      }
      if (AmountB != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AmountB);
      }
      if (LiquidityToken != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LiquidityToken);
      }
      if (Pair.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Pair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      if (SymbolA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolA);
      }
      if (SymbolB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolB);
      }
      if (AmountA != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountA);
      }
      if (AmountB != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountB);
      }
      if (LiquidityToken != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LiquidityToken);
      }
      if (Pair.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiquidityRemoved other) {
      if (other == null) {
        return;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          Sender = new global::AElf.Types.Address();
        }
        Sender.MergeFrom(other.Sender);
      }
      if (other.SymbolA.Length != 0) {
        SymbolA = other.SymbolA;
      }
      if (other.SymbolB.Length != 0) {
        SymbolB = other.SymbolB;
      }
      if (other.AmountA != 0L) {
        AmountA = other.AmountA;
      }
      if (other.AmountB != 0L) {
        AmountB = other.AmountB;
      }
      if (other.LiquidityToken != 0L) {
        LiquidityToken = other.LiquidityToken;
      }
      if (other.Pair.Length != 0) {
        Pair = other.Pair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sender_ == null) {
              Sender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Sender);
            break;
          }
          case 18: {
            SymbolA = input.ReadString();
            break;
          }
          case 26: {
            SymbolB = input.ReadString();
            break;
          }
          case 32: {
            AmountA = input.ReadInt64();
            break;
          }
          case 40: {
            AmountB = input.ReadInt64();
            break;
          }
          case 48: {
            LiquidityToken = input.ReadInt64();
            break;
          }
          case 58: {
            Pair = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Swap : pb::IMessage<Swap> {
    private static readonly pb::MessageParser<Swap> _parser = new pb::MessageParser<Swap>(() => new Swap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Swap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Swap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Swap(Swap other) : this() {
      sender_ = other.sender_ != null ? other.sender_.Clone() : null;
      symbolIn_ = other.symbolIn_;
      symbolOut_ = other.symbolOut_;
      amountIn_ = other.amountIn_;
      amountOut_ = other.amountOut_;
      totalFee_ = other.totalFee_;
      bonusFee_ = other.bonusFee_;
      channel_ = other.channel_;
      pair_ = other.pair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Swap Clone() {
      return new Swap(this);
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 1;
    private global::AElf.Types.Address sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "symbol_in" field.</summary>
    public const int SymbolInFieldNumber = 2;
    private string symbolIn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolIn {
      get { return symbolIn_; }
      set {
        symbolIn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_out" field.</summary>
    public const int SymbolOutFieldNumber = 3;
    private string symbolOut_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolOut {
      get { return symbolOut_; }
      set {
        symbolOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_in" field.</summary>
    public const int AmountInFieldNumber = 4;
    private long amountIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountIn {
      get { return amountIn_; }
      set {
        amountIn_ = value;
      }
    }

    /// <summary>Field number for the "amount_out" field.</summary>
    public const int AmountOutFieldNumber = 5;
    private long amountOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountOut {
      get { return amountOut_; }
      set {
        amountOut_ = value;
      }
    }

    /// <summary>Field number for the "total_fee" field.</summary>
    public const int TotalFeeFieldNumber = 6;
    private long totalFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFee {
      get { return totalFee_; }
      set {
        totalFee_ = value;
      }
    }

    /// <summary>Field number for the "bonus_fee" field.</summary>
    public const int BonusFeeFieldNumber = 7;
    private long bonusFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BonusFee {
      get { return bonusFee_; }
      set {
        bonusFee_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 8;
    private string channel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pair" field.</summary>
    public const int PairFieldNumber = 9;
    private string pair_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pair {
      get { return pair_; }
      set {
        pair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Swap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Swap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sender, other.Sender)) return false;
      if (SymbolIn != other.SymbolIn) return false;
      if (SymbolOut != other.SymbolOut) return false;
      if (AmountIn != other.AmountIn) return false;
      if (AmountOut != other.AmountOut) return false;
      if (TotalFee != other.TotalFee) return false;
      if (BonusFee != other.BonusFee) return false;
      if (Channel != other.Channel) return false;
      if (Pair != other.Pair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sender_ != null) hash ^= Sender.GetHashCode();
      if (SymbolIn.Length != 0) hash ^= SymbolIn.GetHashCode();
      if (SymbolOut.Length != 0) hash ^= SymbolOut.GetHashCode();
      if (AmountIn != 0L) hash ^= AmountIn.GetHashCode();
      if (AmountOut != 0L) hash ^= AmountOut.GetHashCode();
      if (TotalFee != 0L) hash ^= TotalFee.GetHashCode();
      if (BonusFee != 0L) hash ^= BonusFee.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (Pair.Length != 0) hash ^= Pair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sender);
      }
      if (SymbolIn.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolIn);
      }
      if (SymbolOut.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SymbolOut);
      }
      if (AmountIn != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AmountIn);
      }
      if (AmountOut != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AmountOut);
      }
      if (TotalFee != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalFee);
      }
      if (BonusFee != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(BonusFee);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Channel);
      }
      if (Pair.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Pair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      if (SymbolIn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolIn);
      }
      if (SymbolOut.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolOut);
      }
      if (AmountIn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountIn);
      }
      if (AmountOut != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountOut);
      }
      if (TotalFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFee);
      }
      if (BonusFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BonusFee);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (Pair.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Swap other) {
      if (other == null) {
        return;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          Sender = new global::AElf.Types.Address();
        }
        Sender.MergeFrom(other.Sender);
      }
      if (other.SymbolIn.Length != 0) {
        SymbolIn = other.SymbolIn;
      }
      if (other.SymbolOut.Length != 0) {
        SymbolOut = other.SymbolOut;
      }
      if (other.AmountIn != 0L) {
        AmountIn = other.AmountIn;
      }
      if (other.AmountOut != 0L) {
        AmountOut = other.AmountOut;
      }
      if (other.TotalFee != 0L) {
        TotalFee = other.TotalFee;
      }
      if (other.BonusFee != 0L) {
        BonusFee = other.BonusFee;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      if (other.Pair.Length != 0) {
        Pair = other.Pair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sender_ == null) {
              Sender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Sender);
            break;
          }
          case 18: {
            SymbolIn = input.ReadString();
            break;
          }
          case 26: {
            SymbolOut = input.ReadString();
            break;
          }
          case 32: {
            AmountIn = input.ReadInt64();
            break;
          }
          case 40: {
            AmountOut = input.ReadInt64();
            break;
          }
          case 48: {
            TotalFee = input.ReadInt64();
            break;
          }
          case 56: {
            BonusFee = input.ReadInt64();
            break;
          }
          case 66: {
            Channel = input.ReadString();
            break;
          }
          case 74: {
            Pair = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Sync : pb::IMessage<Sync> {
    private static readonly pb::MessageParser<Sync> _parser = new pb::MessageParser<Sync>(() => new Sync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.Swap.GandalfswapContractReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sync(Sync other) : this() {
      symbolA_ = other.symbolA_;
      symbolB_ = other.symbolB_;
      reserveA_ = other.reserveA_;
      reserveB_ = other.reserveB_;
      pair_ = other.pair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sync Clone() {
      return new Sync(this);
    }

    /// <summary>Field number for the "symbol_a" field.</summary>
    public const int SymbolAFieldNumber = 2;
    private string symbolA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolA {
      get { return symbolA_; }
      set {
        symbolA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_b" field.</summary>
    public const int SymbolBFieldNumber = 3;
    private string symbolB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SymbolB {
      get { return symbolB_; }
      set {
        symbolB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reserve_a" field.</summary>
    public const int ReserveAFieldNumber = 4;
    private long reserveA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReserveA {
      get { return reserveA_; }
      set {
        reserveA_ = value;
      }
    }

    /// <summary>Field number for the "reserve_b" field.</summary>
    public const int ReserveBFieldNumber = 5;
    private long reserveB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReserveB {
      get { return reserveB_; }
      set {
        reserveB_ = value;
      }
    }

    /// <summary>Field number for the "pair" field.</summary>
    public const int PairFieldNumber = 6;
    private string pair_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pair {
      get { return pair_; }
      set {
        pair_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SymbolA != other.SymbolA) return false;
      if (SymbolB != other.SymbolB) return false;
      if (ReserveA != other.ReserveA) return false;
      if (ReserveB != other.ReserveB) return false;
      if (Pair != other.Pair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SymbolA.Length != 0) hash ^= SymbolA.GetHashCode();
      if (SymbolB.Length != 0) hash ^= SymbolB.GetHashCode();
      if (ReserveA != 0L) hash ^= ReserveA.GetHashCode();
      if (ReserveB != 0L) hash ^= ReserveB.GetHashCode();
      if (Pair.Length != 0) hash ^= Pair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SymbolA.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SymbolA);
      }
      if (SymbolB.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SymbolB);
      }
      if (ReserveA != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ReserveA);
      }
      if (ReserveB != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ReserveB);
      }
      if (Pair.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Pair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SymbolA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolA);
      }
      if (SymbolB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolB);
      }
      if (ReserveA != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReserveA);
      }
      if (ReserveB != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReserveB);
      }
      if (Pair.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sync other) {
      if (other == null) {
        return;
      }
      if (other.SymbolA.Length != 0) {
        SymbolA = other.SymbolA;
      }
      if (other.SymbolB.Length != 0) {
        SymbolB = other.SymbolB;
      }
      if (other.ReserveA != 0L) {
        ReserveA = other.ReserveA;
      }
      if (other.ReserveB != 0L) {
        ReserveB = other.ReserveB;
      }
      if (other.Pair.Length != 0) {
        Pair = other.Pair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            SymbolA = input.ReadString();
            break;
          }
          case 26: {
            SymbolB = input.ReadString();
            break;
          }
          case 32: {
            ReserveA = input.ReadInt64();
            break;
          }
          case 40: {
            ReserveB = input.ReadInt64();
            break;
          }
          case 50: {
            Pair = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
